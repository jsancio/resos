// This file is generated. Do not edit
// @generated

#![allow(dead_code)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(unused_imports)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(Clone,Default)]
pub struct Event {
    // message fields
    field_type: ::std::option::Option<Event_Type>,
    subscribed: ::protobuf::SingularPtrField<Event_Subscribed>,
    acknowledged: ::protobuf::SingularPtrField<Event_Acknowledged>,
    launch: ::protobuf::SingularPtrField<Event_Launch>,
    kill: ::protobuf::SingularPtrField<Event_Kill>,
    message: ::protobuf::SingularPtrField<Event_Message>,
    shutdown: ::protobuf::SingularPtrField<Event_Shutdown>,
    error: ::protobuf::SingularPtrField<Event_Error>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

impl Event {
    pub fn new() -> Event {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static Event {
        static mut instance: ::protobuf::lazy::Lazy<Event> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Event,
        };
        unsafe {
            instance.get(|| {
                Event {
                    field_type: ::std::option::Option::None,
                    subscribed: ::protobuf::SingularPtrField::none(),
                    acknowledged: ::protobuf::SingularPtrField::none(),
                    launch: ::protobuf::SingularPtrField::none(),
                    kill: ::protobuf::SingularPtrField::none(),
                    message: ::protobuf::SingularPtrField::none(),
                    shutdown: ::protobuf::SingularPtrField::none(),
                    error: ::protobuf::SingularPtrField::none(),
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // required .mesos.v1.executor.Event.Type type = 1;

    pub fn clear_field_type(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_field_type(&self) -> bool {
        self.field_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: Event_Type) {
        self.field_type = ::std::option::Option::Some(v);
    }

    pub fn get_field_type<'a>(&self) -> Event_Type {
        self.field_type.unwrap_or(Event_Type::SUBSCRIBED)
    }

    // optional .mesos.v1.executor.Event.Subscribed subscribed = 2;

    pub fn clear_subscribed(&mut self) {
        self.subscribed.clear();
    }

    pub fn has_subscribed(&self) -> bool {
        self.subscribed.is_some()
    }

    // Param is passed by value, moved
    pub fn set_subscribed(&mut self, v: Event_Subscribed) {
        self.subscribed = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_subscribed<'a>(&'a mut self) -> &'a mut Event_Subscribed {
        if self.subscribed.is_none() {
            self.subscribed.set_default();
        };
        self.subscribed.as_mut().unwrap()
    }

    // Take field
    pub fn take_subscribed(&mut self) -> Event_Subscribed {
        self.subscribed.take().unwrap_or_else(|| Event_Subscribed::new())
    }

    pub fn get_subscribed<'a>(&'a self) -> &'a Event_Subscribed {
        self.subscribed.as_ref().unwrap_or_else(|| Event_Subscribed::default_instance())
    }

    // optional .mesos.v1.executor.Event.Acknowledged acknowledged = 3;

    pub fn clear_acknowledged(&mut self) {
        self.acknowledged.clear();
    }

    pub fn has_acknowledged(&self) -> bool {
        self.acknowledged.is_some()
    }

    // Param is passed by value, moved
    pub fn set_acknowledged(&mut self, v: Event_Acknowledged) {
        self.acknowledged = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_acknowledged<'a>(&'a mut self) -> &'a mut Event_Acknowledged {
        if self.acknowledged.is_none() {
            self.acknowledged.set_default();
        };
        self.acknowledged.as_mut().unwrap()
    }

    // Take field
    pub fn take_acknowledged(&mut self) -> Event_Acknowledged {
        self.acknowledged.take().unwrap_or_else(|| Event_Acknowledged::new())
    }

    pub fn get_acknowledged<'a>(&'a self) -> &'a Event_Acknowledged {
        self.acknowledged.as_ref().unwrap_or_else(|| Event_Acknowledged::default_instance())
    }

    // optional .mesos.v1.executor.Event.Launch launch = 4;

    pub fn clear_launch(&mut self) {
        self.launch.clear();
    }

    pub fn has_launch(&self) -> bool {
        self.launch.is_some()
    }

    // Param is passed by value, moved
    pub fn set_launch(&mut self, v: Event_Launch) {
        self.launch = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_launch<'a>(&'a mut self) -> &'a mut Event_Launch {
        if self.launch.is_none() {
            self.launch.set_default();
        };
        self.launch.as_mut().unwrap()
    }

    // Take field
    pub fn take_launch(&mut self) -> Event_Launch {
        self.launch.take().unwrap_or_else(|| Event_Launch::new())
    }

    pub fn get_launch<'a>(&'a self) -> &'a Event_Launch {
        self.launch.as_ref().unwrap_or_else(|| Event_Launch::default_instance())
    }

    // optional .mesos.v1.executor.Event.Kill kill = 5;

    pub fn clear_kill(&mut self) {
        self.kill.clear();
    }

    pub fn has_kill(&self) -> bool {
        self.kill.is_some()
    }

    // Param is passed by value, moved
    pub fn set_kill(&mut self, v: Event_Kill) {
        self.kill = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_kill<'a>(&'a mut self) -> &'a mut Event_Kill {
        if self.kill.is_none() {
            self.kill.set_default();
        };
        self.kill.as_mut().unwrap()
    }

    // Take field
    pub fn take_kill(&mut self) -> Event_Kill {
        self.kill.take().unwrap_or_else(|| Event_Kill::new())
    }

    pub fn get_kill<'a>(&'a self) -> &'a Event_Kill {
        self.kill.as_ref().unwrap_or_else(|| Event_Kill::default_instance())
    }

    // optional .mesos.v1.executor.Event.Message message = 6;

    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    pub fn has_message(&self) -> bool {
        self.message.is_some()
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: Event_Message) {
        self.message = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message<'a>(&'a mut self) -> &'a mut Event_Message {
        if self.message.is_none() {
            self.message.set_default();
        };
        self.message.as_mut().unwrap()
    }

    // Take field
    pub fn take_message(&mut self) -> Event_Message {
        self.message.take().unwrap_or_else(|| Event_Message::new())
    }

    pub fn get_message<'a>(&'a self) -> &'a Event_Message {
        self.message.as_ref().unwrap_or_else(|| Event_Message::default_instance())
    }

    // optional .mesos.v1.executor.Event.Shutdown shutdown = 7;

    pub fn clear_shutdown(&mut self) {
        self.shutdown.clear();
    }

    pub fn has_shutdown(&self) -> bool {
        self.shutdown.is_some()
    }

    // Param is passed by value, moved
    pub fn set_shutdown(&mut self, v: Event_Shutdown) {
        self.shutdown = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_shutdown<'a>(&'a mut self) -> &'a mut Event_Shutdown {
        if self.shutdown.is_none() {
            self.shutdown.set_default();
        };
        self.shutdown.as_mut().unwrap()
    }

    // Take field
    pub fn take_shutdown(&mut self) -> Event_Shutdown {
        self.shutdown.take().unwrap_or_else(|| Event_Shutdown::new())
    }

    pub fn get_shutdown<'a>(&'a self) -> &'a Event_Shutdown {
        self.shutdown.as_ref().unwrap_or_else(|| Event_Shutdown::default_instance())
    }

    // optional .mesos.v1.executor.Event.Error error = 8;

    pub fn clear_error(&mut self) {
        self.error.clear();
    }

    pub fn has_error(&self) -> bool {
        self.error.is_some()
    }

    // Param is passed by value, moved
    pub fn set_error(&mut self, v: Event_Error) {
        self.error = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_error<'a>(&'a mut self) -> &'a mut Event_Error {
        if self.error.is_none() {
            self.error.set_default();
        };
        self.error.as_mut().unwrap()
    }

    // Take field
    pub fn take_error(&mut self) -> Event_Error {
        self.error.take().unwrap_or_else(|| Event_Error::new())
    }

    pub fn get_error<'a>(&'a self) -> &'a Event_Error {
        self.error.as_ref().unwrap_or_else(|| Event_Error::default_instance())
    }
}

impl ::protobuf::Message for Event {
    fn is_initialized(&self) -> bool {
        if self.field_type.is_none() {
            return false;
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = try!(is.read_enum());
                    self.field_type = ::std::option::Option::Some(tmp);
                },
                2 => {
                    try!(::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.subscribed));
                },
                3 => {
                    try!(::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.acknowledged));
                },
                4 => {
                    try!(::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.launch));
                },
                5 => {
                    try!(::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.kill));
                },
                6 => {
                    try!(::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.message));
                },
                7 => {
                    try!(::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.shutdown));
                },
                8 => {
                    try!(::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.error));
                },
                _ => {
                    try!(::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields()));
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in self.field_type.iter() {
            my_size += ::protobuf::rt::enum_size(1, *value);
        };
        for value in self.subscribed.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in self.acknowledged.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in self.launch.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in self.kill.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in self.message.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in self.shutdown.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in self.error.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.field_type {
            try!(os.write_enum(1, v.value()));
        };
        if let Some(v) = self.subscribed.as_ref() {
            try!(os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        if let Some(v) = self.acknowledged.as_ref() {
            try!(os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        if let Some(v) = self.launch.as_ref() {
            try!(os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        if let Some(v) = self.kill.as_ref() {
            try!(os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        if let Some(v) = self.message.as_ref() {
            try!(os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        if let Some(v) = self.shutdown.as_ref() {
            try!(os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        if let Some(v) = self.error.as_ref() {
            try!(os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        try!(os.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields<'s>(&'s self) -> &'s ::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields<'s>(&'s mut self) -> &'s mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<Event>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for Event {
    fn new() -> Event {
        Event::new()
    }

    fn descriptor_static(_: ::std::option::Option<Event>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_enum_accessor(
                    "type",
                    Event::has_field_type,
                    Event::get_field_type,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "subscribed",
                    Event::has_subscribed,
                    Event::get_subscribed,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "acknowledged",
                    Event::has_acknowledged,
                    Event::get_acknowledged,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "launch",
                    Event::has_launch,
                    Event::get_launch,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "kill",
                    Event::has_kill,
                    Event::get_kill,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "message",
                    Event::has_message,
                    Event::get_message,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "shutdown",
                    Event::has_shutdown,
                    Event::get_shutdown,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "error",
                    Event::has_error,
                    Event::get_error,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Event>(
                    "Event",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for Event {
    fn clear(&mut self) {
        self.clear_field_type();
        self.clear_subscribed();
        self.clear_acknowledged();
        self.clear_launch();
        self.clear_kill();
        self.clear_message();
        self.clear_shutdown();
        self.clear_error();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for Event {
    fn eq(&self, other: &Event) -> bool {
        self.field_type == other.field_type &&
        self.subscribed == other.subscribed &&
        self.acknowledged == other.acknowledged &&
        self.launch == other.launch &&
        self.kill == other.kill &&
        self.message == other.message &&
        self.shutdown == other.shutdown &&
        self.error == other.error &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for Event {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,Default)]
pub struct Event_Subscribed {
    // message fields
    executor_info: ::protobuf::SingularPtrField<super::mesos::ExecutorInfo>,
    framework_info: ::protobuf::SingularPtrField<super::mesos::FrameworkInfo>,
    agent_info: ::protobuf::SingularPtrField<super::mesos::AgentInfo>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

impl Event_Subscribed {
    pub fn new() -> Event_Subscribed {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static Event_Subscribed {
        static mut instance: ::protobuf::lazy::Lazy<Event_Subscribed> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Event_Subscribed,
        };
        unsafe {
            instance.get(|| {
                Event_Subscribed {
                    executor_info: ::protobuf::SingularPtrField::none(),
                    framework_info: ::protobuf::SingularPtrField::none(),
                    agent_info: ::protobuf::SingularPtrField::none(),
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // required .mesos.v1.ExecutorInfo executor_info = 1;

    pub fn clear_executor_info(&mut self) {
        self.executor_info.clear();
    }

    pub fn has_executor_info(&self) -> bool {
        self.executor_info.is_some()
    }

    // Param is passed by value, moved
    pub fn set_executor_info(&mut self, v: super::mesos::ExecutorInfo) {
        self.executor_info = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_executor_info<'a>(&'a mut self) -> &'a mut super::mesos::ExecutorInfo {
        if self.executor_info.is_none() {
            self.executor_info.set_default();
        };
        self.executor_info.as_mut().unwrap()
    }

    // Take field
    pub fn take_executor_info(&mut self) -> super::mesos::ExecutorInfo {
        self.executor_info.take().unwrap_or_else(|| super::mesos::ExecutorInfo::new())
    }

    pub fn get_executor_info<'a>(&'a self) -> &'a super::mesos::ExecutorInfo {
        self.executor_info.as_ref().unwrap_or_else(|| super::mesos::ExecutorInfo::default_instance())
    }

    // required .mesos.v1.FrameworkInfo framework_info = 2;

    pub fn clear_framework_info(&mut self) {
        self.framework_info.clear();
    }

    pub fn has_framework_info(&self) -> bool {
        self.framework_info.is_some()
    }

    // Param is passed by value, moved
    pub fn set_framework_info(&mut self, v: super::mesos::FrameworkInfo) {
        self.framework_info = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_framework_info<'a>(&'a mut self) -> &'a mut super::mesos::FrameworkInfo {
        if self.framework_info.is_none() {
            self.framework_info.set_default();
        };
        self.framework_info.as_mut().unwrap()
    }

    // Take field
    pub fn take_framework_info(&mut self) -> super::mesos::FrameworkInfo {
        self.framework_info.take().unwrap_or_else(|| super::mesos::FrameworkInfo::new())
    }

    pub fn get_framework_info<'a>(&'a self) -> &'a super::mesos::FrameworkInfo {
        self.framework_info.as_ref().unwrap_or_else(|| super::mesos::FrameworkInfo::default_instance())
    }

    // required .mesos.v1.AgentInfo agent_info = 3;

    pub fn clear_agent_info(&mut self) {
        self.agent_info.clear();
    }

    pub fn has_agent_info(&self) -> bool {
        self.agent_info.is_some()
    }

    // Param is passed by value, moved
    pub fn set_agent_info(&mut self, v: super::mesos::AgentInfo) {
        self.agent_info = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_agent_info<'a>(&'a mut self) -> &'a mut super::mesos::AgentInfo {
        if self.agent_info.is_none() {
            self.agent_info.set_default();
        };
        self.agent_info.as_mut().unwrap()
    }

    // Take field
    pub fn take_agent_info(&mut self) -> super::mesos::AgentInfo {
        self.agent_info.take().unwrap_or_else(|| super::mesos::AgentInfo::new())
    }

    pub fn get_agent_info<'a>(&'a self) -> &'a super::mesos::AgentInfo {
        self.agent_info.as_ref().unwrap_or_else(|| super::mesos::AgentInfo::default_instance())
    }
}

impl ::protobuf::Message for Event_Subscribed {
    fn is_initialized(&self) -> bool {
        if self.executor_info.is_none() {
            return false;
        };
        if self.framework_info.is_none() {
            return false;
        };
        if self.agent_info.is_none() {
            return false;
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    try!(::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.executor_info));
                },
                2 => {
                    try!(::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.framework_info));
                },
                3 => {
                    try!(::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.agent_info));
                },
                _ => {
                    try!(::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields()));
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in self.executor_info.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in self.framework_info.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in self.agent_info.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.executor_info.as_ref() {
            try!(os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        if let Some(v) = self.framework_info.as_ref() {
            try!(os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        if let Some(v) = self.agent_info.as_ref() {
            try!(os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        try!(os.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields<'s>(&'s self) -> &'s ::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields<'s>(&'s mut self) -> &'s mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<Event_Subscribed>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for Event_Subscribed {
    fn new() -> Event_Subscribed {
        Event_Subscribed::new()
    }

    fn descriptor_static(_: ::std::option::Option<Event_Subscribed>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "executor_info",
                    Event_Subscribed::has_executor_info,
                    Event_Subscribed::get_executor_info,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "framework_info",
                    Event_Subscribed::has_framework_info,
                    Event_Subscribed::get_framework_info,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "agent_info",
                    Event_Subscribed::has_agent_info,
                    Event_Subscribed::get_agent_info,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Event_Subscribed>(
                    "Event_Subscribed",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for Event_Subscribed {
    fn clear(&mut self) {
        self.clear_executor_info();
        self.clear_framework_info();
        self.clear_agent_info();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for Event_Subscribed {
    fn eq(&self, other: &Event_Subscribed) -> bool {
        self.executor_info == other.executor_info &&
        self.framework_info == other.framework_info &&
        self.agent_info == other.agent_info &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for Event_Subscribed {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,Default)]
pub struct Event_Launch {
    // message fields
    task: ::protobuf::SingularPtrField<super::mesos::TaskInfo>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

impl Event_Launch {
    pub fn new() -> Event_Launch {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static Event_Launch {
        static mut instance: ::protobuf::lazy::Lazy<Event_Launch> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Event_Launch,
        };
        unsafe {
            instance.get(|| {
                Event_Launch {
                    task: ::protobuf::SingularPtrField::none(),
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // required .mesos.v1.TaskInfo task = 1;

    pub fn clear_task(&mut self) {
        self.task.clear();
    }

    pub fn has_task(&self) -> bool {
        self.task.is_some()
    }

    // Param is passed by value, moved
    pub fn set_task(&mut self, v: super::mesos::TaskInfo) {
        self.task = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_task<'a>(&'a mut self) -> &'a mut super::mesos::TaskInfo {
        if self.task.is_none() {
            self.task.set_default();
        };
        self.task.as_mut().unwrap()
    }

    // Take field
    pub fn take_task(&mut self) -> super::mesos::TaskInfo {
        self.task.take().unwrap_or_else(|| super::mesos::TaskInfo::new())
    }

    pub fn get_task<'a>(&'a self) -> &'a super::mesos::TaskInfo {
        self.task.as_ref().unwrap_or_else(|| super::mesos::TaskInfo::default_instance())
    }
}

impl ::protobuf::Message for Event_Launch {
    fn is_initialized(&self) -> bool {
        if self.task.is_none() {
            return false;
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    try!(::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.task));
                },
                _ => {
                    try!(::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields()));
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in self.task.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.task.as_ref() {
            try!(os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        try!(os.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields<'s>(&'s self) -> &'s ::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields<'s>(&'s mut self) -> &'s mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<Event_Launch>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for Event_Launch {
    fn new() -> Event_Launch {
        Event_Launch::new()
    }

    fn descriptor_static(_: ::std::option::Option<Event_Launch>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "task",
                    Event_Launch::has_task,
                    Event_Launch::get_task,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Event_Launch>(
                    "Event_Launch",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for Event_Launch {
    fn clear(&mut self) {
        self.clear_task();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for Event_Launch {
    fn eq(&self, other: &Event_Launch) -> bool {
        self.task == other.task &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for Event_Launch {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,Default)]
pub struct Event_Kill {
    // message fields
    task_id: ::protobuf::SingularPtrField<super::mesos::TaskID>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

impl Event_Kill {
    pub fn new() -> Event_Kill {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static Event_Kill {
        static mut instance: ::protobuf::lazy::Lazy<Event_Kill> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Event_Kill,
        };
        unsafe {
            instance.get(|| {
                Event_Kill {
                    task_id: ::protobuf::SingularPtrField::none(),
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // required .mesos.v1.TaskID task_id = 1;

    pub fn clear_task_id(&mut self) {
        self.task_id.clear();
    }

    pub fn has_task_id(&self) -> bool {
        self.task_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_task_id(&mut self, v: super::mesos::TaskID) {
        self.task_id = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_task_id<'a>(&'a mut self) -> &'a mut super::mesos::TaskID {
        if self.task_id.is_none() {
            self.task_id.set_default();
        };
        self.task_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_task_id(&mut self) -> super::mesos::TaskID {
        self.task_id.take().unwrap_or_else(|| super::mesos::TaskID::new())
    }

    pub fn get_task_id<'a>(&'a self) -> &'a super::mesos::TaskID {
        self.task_id.as_ref().unwrap_or_else(|| super::mesos::TaskID::default_instance())
    }
}

impl ::protobuf::Message for Event_Kill {
    fn is_initialized(&self) -> bool {
        if self.task_id.is_none() {
            return false;
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    try!(::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.task_id));
                },
                _ => {
                    try!(::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields()));
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in self.task_id.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.task_id.as_ref() {
            try!(os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        try!(os.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields<'s>(&'s self) -> &'s ::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields<'s>(&'s mut self) -> &'s mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<Event_Kill>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for Event_Kill {
    fn new() -> Event_Kill {
        Event_Kill::new()
    }

    fn descriptor_static(_: ::std::option::Option<Event_Kill>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "task_id",
                    Event_Kill::has_task_id,
                    Event_Kill::get_task_id,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Event_Kill>(
                    "Event_Kill",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for Event_Kill {
    fn clear(&mut self) {
        self.clear_task_id();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for Event_Kill {
    fn eq(&self, other: &Event_Kill) -> bool {
        self.task_id == other.task_id &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for Event_Kill {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,Default)]
pub struct Event_Acknowledged {
    // message fields
    task_id: ::protobuf::SingularPtrField<super::mesos::TaskID>,
    uuid: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

impl Event_Acknowledged {
    pub fn new() -> Event_Acknowledged {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static Event_Acknowledged {
        static mut instance: ::protobuf::lazy::Lazy<Event_Acknowledged> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Event_Acknowledged,
        };
        unsafe {
            instance.get(|| {
                Event_Acknowledged {
                    task_id: ::protobuf::SingularPtrField::none(),
                    uuid: ::protobuf::SingularField::none(),
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // required .mesos.v1.TaskID task_id = 1;

    pub fn clear_task_id(&mut self) {
        self.task_id.clear();
    }

    pub fn has_task_id(&self) -> bool {
        self.task_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_task_id(&mut self, v: super::mesos::TaskID) {
        self.task_id = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_task_id<'a>(&'a mut self) -> &'a mut super::mesos::TaskID {
        if self.task_id.is_none() {
            self.task_id.set_default();
        };
        self.task_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_task_id(&mut self) -> super::mesos::TaskID {
        self.task_id.take().unwrap_or_else(|| super::mesos::TaskID::new())
    }

    pub fn get_task_id<'a>(&'a self) -> &'a super::mesos::TaskID {
        self.task_id.as_ref().unwrap_or_else(|| super::mesos::TaskID::default_instance())
    }

    // required bytes uuid = 2;

    pub fn clear_uuid(&mut self) {
        self.uuid.clear();
    }

    pub fn has_uuid(&self) -> bool {
        self.uuid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_uuid(&mut self, v: ::std::vec::Vec<u8>) {
        self.uuid = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_uuid<'a>(&'a mut self) -> &'a mut ::std::vec::Vec<u8> {
        if self.uuid.is_none() {
            self.uuid.set_default();
        };
        self.uuid.as_mut().unwrap()
    }

    // Take field
    pub fn take_uuid(&mut self) -> ::std::vec::Vec<u8> {
        self.uuid.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_uuid<'a>(&'a self) -> &'a [u8] {
        match self.uuid.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
}

impl ::protobuf::Message for Event_Acknowledged {
    fn is_initialized(&self) -> bool {
        if self.task_id.is_none() {
            return false;
        };
        if self.uuid.is_none() {
            return false;
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    try!(::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.task_id));
                },
                2 => {
                    try!(::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.uuid));
                },
                _ => {
                    try!(::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields()));
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in self.task_id.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in self.uuid.iter() {
            my_size += ::protobuf::rt::bytes_size(2, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.task_id.as_ref() {
            try!(os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        if let Some(v) = self.uuid.as_ref() {
            try!(os.write_bytes(2, &v));
        };
        try!(os.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields<'s>(&'s self) -> &'s ::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields<'s>(&'s mut self) -> &'s mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<Event_Acknowledged>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for Event_Acknowledged {
    fn new() -> Event_Acknowledged {
        Event_Acknowledged::new()
    }

    fn descriptor_static(_: ::std::option::Option<Event_Acknowledged>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "task_id",
                    Event_Acknowledged::has_task_id,
                    Event_Acknowledged::get_task_id,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor(
                    "uuid",
                    Event_Acknowledged::has_uuid,
                    Event_Acknowledged::get_uuid,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Event_Acknowledged>(
                    "Event_Acknowledged",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for Event_Acknowledged {
    fn clear(&mut self) {
        self.clear_task_id();
        self.clear_uuid();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for Event_Acknowledged {
    fn eq(&self, other: &Event_Acknowledged) -> bool {
        self.task_id == other.task_id &&
        self.uuid == other.uuid &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for Event_Acknowledged {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,Default)]
pub struct Event_Message {
    // message fields
    data: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

impl Event_Message {
    pub fn new() -> Event_Message {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static Event_Message {
        static mut instance: ::protobuf::lazy::Lazy<Event_Message> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Event_Message,
        };
        unsafe {
            instance.get(|| {
                Event_Message {
                    data: ::protobuf::SingularField::none(),
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // required bytes data = 1;

    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    pub fn has_data(&self) -> bool {
        self.data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data<'a>(&'a mut self) -> &'a mut ::std::vec::Vec<u8> {
        if self.data.is_none() {
            self.data.set_default();
        };
        self.data.as_mut().unwrap()
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
        self.data.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_data<'a>(&'a self) -> &'a [u8] {
        match self.data.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
}

impl ::protobuf::Message for Event_Message {
    fn is_initialized(&self) -> bool {
        if self.data.is_none() {
            return false;
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    try!(::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.data));
                },
                _ => {
                    try!(::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields()));
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in self.data.iter() {
            my_size += ::protobuf::rt::bytes_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.data.as_ref() {
            try!(os.write_bytes(1, &v));
        };
        try!(os.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields<'s>(&'s self) -> &'s ::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields<'s>(&'s mut self) -> &'s mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<Event_Message>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for Event_Message {
    fn new() -> Event_Message {
        Event_Message::new()
    }

    fn descriptor_static(_: ::std::option::Option<Event_Message>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor(
                    "data",
                    Event_Message::has_data,
                    Event_Message::get_data,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Event_Message>(
                    "Event_Message",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for Event_Message {
    fn clear(&mut self) {
        self.clear_data();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for Event_Message {
    fn eq(&self, other: &Event_Message) -> bool {
        self.data == other.data &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for Event_Message {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,Default)]
pub struct Event_Shutdown {
    // message fields
    grace_period_seconds: ::std::option::Option<f64>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

impl Event_Shutdown {
    pub fn new() -> Event_Shutdown {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static Event_Shutdown {
        static mut instance: ::protobuf::lazy::Lazy<Event_Shutdown> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Event_Shutdown,
        };
        unsafe {
            instance.get(|| {
                Event_Shutdown {
                    grace_period_seconds: ::std::option::Option::None,
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // optional double grace_period_seconds = 1;

    pub fn clear_grace_period_seconds(&mut self) {
        self.grace_period_seconds = ::std::option::Option::None;
    }

    pub fn has_grace_period_seconds(&self) -> bool {
        self.grace_period_seconds.is_some()
    }

    // Param is passed by value, moved
    pub fn set_grace_period_seconds(&mut self, v: f64) {
        self.grace_period_seconds = ::std::option::Option::Some(v);
    }

    pub fn get_grace_period_seconds<'a>(&self) -> f64 {
        self.grace_period_seconds.unwrap_or(5f64)
    }
}

impl ::protobuf::Message for Event_Shutdown {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = try!(is.read_double());
                    self.grace_period_seconds = ::std::option::Option::Some(tmp);
                },
                _ => {
                    try!(::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields()));
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.grace_period_seconds.is_some() {
            my_size += 9;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.grace_period_seconds {
            try!(os.write_double(1, v));
        };
        try!(os.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields<'s>(&'s self) -> &'s ::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields<'s>(&'s mut self) -> &'s mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<Event_Shutdown>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for Event_Shutdown {
    fn new() -> Event_Shutdown {
        Event_Shutdown::new()
    }

    fn descriptor_static(_: ::std::option::Option<Event_Shutdown>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_f64_accessor(
                    "grace_period_seconds",
                    Event_Shutdown::has_grace_period_seconds,
                    Event_Shutdown::get_grace_period_seconds,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Event_Shutdown>(
                    "Event_Shutdown",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for Event_Shutdown {
    fn clear(&mut self) {
        self.clear_grace_period_seconds();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for Event_Shutdown {
    fn eq(&self, other: &Event_Shutdown) -> bool {
        self.grace_period_seconds == other.grace_period_seconds &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for Event_Shutdown {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,Default)]
pub struct Event_Error {
    // message fields
    message: ::protobuf::SingularField<::std::string::String>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

impl Event_Error {
    pub fn new() -> Event_Error {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static Event_Error {
        static mut instance: ::protobuf::lazy::Lazy<Event_Error> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Event_Error,
        };
        unsafe {
            instance.get(|| {
                Event_Error {
                    message: ::protobuf::SingularField::none(),
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // required string message = 1;

    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    pub fn has_message(&self) -> bool {
        self.message.is_some()
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::string::String) {
        self.message = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message<'a>(&'a mut self) -> &'a mut ::std::string::String {
        if self.message.is_none() {
            self.message.set_default();
        };
        self.message.as_mut().unwrap()
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::string::String {
        self.message.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_message<'a>(&'a self) -> &'a str {
        match self.message.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
}

impl ::protobuf::Message for Event_Error {
    fn is_initialized(&self) -> bool {
        if self.message.is_none() {
            return false;
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    try!(::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.message));
                },
                _ => {
                    try!(::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields()));
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in self.message.iter() {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.message.as_ref() {
            try!(os.write_string(1, &v));
        };
        try!(os.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields<'s>(&'s self) -> &'s ::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields<'s>(&'s mut self) -> &'s mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<Event_Error>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for Event_Error {
    fn new() -> Event_Error {
        Event_Error::new()
    }

    fn descriptor_static(_: ::std::option::Option<Event_Error>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_string_accessor(
                    "message",
                    Event_Error::has_message,
                    Event_Error::get_message,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Event_Error>(
                    "Event_Error",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for Event_Error {
    fn clear(&mut self) {
        self.clear_message();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for Event_Error {
    fn eq(&self, other: &Event_Error) -> bool {
        self.message == other.message &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for Event_Error {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Event_Type {
    SUBSCRIBED = 1,
    LAUNCH = 2,
    KILL = 3,
    ACKNOWLEDGED = 4,
    MESSAGE = 5,
    SHUTDOWN = 6,
    ERROR = 7,
}

impl ::protobuf::ProtobufEnum for Event_Type {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Event_Type> {
        match value {
            1 => ::std::option::Option::Some(Event_Type::SUBSCRIBED),
            2 => ::std::option::Option::Some(Event_Type::LAUNCH),
            3 => ::std::option::Option::Some(Event_Type::KILL),
            4 => ::std::option::Option::Some(Event_Type::ACKNOWLEDGED),
            5 => ::std::option::Option::Some(Event_Type::MESSAGE),
            6 => ::std::option::Option::Some(Event_Type::SHUTDOWN),
            7 => ::std::option::Option::Some(Event_Type::ERROR),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Event_Type] = &[
            Event_Type::SUBSCRIBED,
            Event_Type::LAUNCH,
            Event_Type::KILL,
            Event_Type::ACKNOWLEDGED,
            Event_Type::MESSAGE,
            Event_Type::SHUTDOWN,
            Event_Type::ERROR,
        ];
        values
    }

    fn enum_descriptor_static(_: Option<Event_Type>) -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("Event_Type", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for Event_Type {
}

#[derive(Clone,Default)]
pub struct Call {
    // message fields
    executor_id: ::protobuf::SingularPtrField<super::mesos::ExecutorID>,
    framework_id: ::protobuf::SingularPtrField<super::mesos::FrameworkID>,
    field_type: ::std::option::Option<Call_Type>,
    subscribe: ::protobuf::SingularPtrField<Call_Subscribe>,
    update: ::protobuf::SingularPtrField<Call_Update>,
    message: ::protobuf::SingularPtrField<Call_Message>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

impl Call {
    pub fn new() -> Call {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static Call {
        static mut instance: ::protobuf::lazy::Lazy<Call> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Call,
        };
        unsafe {
            instance.get(|| {
                Call {
                    executor_id: ::protobuf::SingularPtrField::none(),
                    framework_id: ::protobuf::SingularPtrField::none(),
                    field_type: ::std::option::Option::None,
                    subscribe: ::protobuf::SingularPtrField::none(),
                    update: ::protobuf::SingularPtrField::none(),
                    message: ::protobuf::SingularPtrField::none(),
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // required .mesos.v1.ExecutorID executor_id = 1;

    pub fn clear_executor_id(&mut self) {
        self.executor_id.clear();
    }

    pub fn has_executor_id(&self) -> bool {
        self.executor_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_executor_id(&mut self, v: super::mesos::ExecutorID) {
        self.executor_id = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_executor_id<'a>(&'a mut self) -> &'a mut super::mesos::ExecutorID {
        if self.executor_id.is_none() {
            self.executor_id.set_default();
        };
        self.executor_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_executor_id(&mut self) -> super::mesos::ExecutorID {
        self.executor_id.take().unwrap_or_else(|| super::mesos::ExecutorID::new())
    }

    pub fn get_executor_id<'a>(&'a self) -> &'a super::mesos::ExecutorID {
        self.executor_id.as_ref().unwrap_or_else(|| super::mesos::ExecutorID::default_instance())
    }

    // required .mesos.v1.FrameworkID framework_id = 2;

    pub fn clear_framework_id(&mut self) {
        self.framework_id.clear();
    }

    pub fn has_framework_id(&self) -> bool {
        self.framework_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_framework_id(&mut self, v: super::mesos::FrameworkID) {
        self.framework_id = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_framework_id<'a>(&'a mut self) -> &'a mut super::mesos::FrameworkID {
        if self.framework_id.is_none() {
            self.framework_id.set_default();
        };
        self.framework_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_framework_id(&mut self) -> super::mesos::FrameworkID {
        self.framework_id.take().unwrap_or_else(|| super::mesos::FrameworkID::new())
    }

    pub fn get_framework_id<'a>(&'a self) -> &'a super::mesos::FrameworkID {
        self.framework_id.as_ref().unwrap_or_else(|| super::mesos::FrameworkID::default_instance())
    }

    // required .mesos.v1.executor.Call.Type type = 3;

    pub fn clear_field_type(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_field_type(&self) -> bool {
        self.field_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: Call_Type) {
        self.field_type = ::std::option::Option::Some(v);
    }

    pub fn get_field_type<'a>(&self) -> Call_Type {
        self.field_type.unwrap_or(Call_Type::SUBSCRIBE)
    }

    // optional .mesos.v1.executor.Call.Subscribe subscribe = 4;

    pub fn clear_subscribe(&mut self) {
        self.subscribe.clear();
    }

    pub fn has_subscribe(&self) -> bool {
        self.subscribe.is_some()
    }

    // Param is passed by value, moved
    pub fn set_subscribe(&mut self, v: Call_Subscribe) {
        self.subscribe = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_subscribe<'a>(&'a mut self) -> &'a mut Call_Subscribe {
        if self.subscribe.is_none() {
            self.subscribe.set_default();
        };
        self.subscribe.as_mut().unwrap()
    }

    // Take field
    pub fn take_subscribe(&mut self) -> Call_Subscribe {
        self.subscribe.take().unwrap_or_else(|| Call_Subscribe::new())
    }

    pub fn get_subscribe<'a>(&'a self) -> &'a Call_Subscribe {
        self.subscribe.as_ref().unwrap_or_else(|| Call_Subscribe::default_instance())
    }

    // optional .mesos.v1.executor.Call.Update update = 5;

    pub fn clear_update(&mut self) {
        self.update.clear();
    }

    pub fn has_update(&self) -> bool {
        self.update.is_some()
    }

    // Param is passed by value, moved
    pub fn set_update(&mut self, v: Call_Update) {
        self.update = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_update<'a>(&'a mut self) -> &'a mut Call_Update {
        if self.update.is_none() {
            self.update.set_default();
        };
        self.update.as_mut().unwrap()
    }

    // Take field
    pub fn take_update(&mut self) -> Call_Update {
        self.update.take().unwrap_or_else(|| Call_Update::new())
    }

    pub fn get_update<'a>(&'a self) -> &'a Call_Update {
        self.update.as_ref().unwrap_or_else(|| Call_Update::default_instance())
    }

    // optional .mesos.v1.executor.Call.Message message = 6;

    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    pub fn has_message(&self) -> bool {
        self.message.is_some()
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: Call_Message) {
        self.message = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message<'a>(&'a mut self) -> &'a mut Call_Message {
        if self.message.is_none() {
            self.message.set_default();
        };
        self.message.as_mut().unwrap()
    }

    // Take field
    pub fn take_message(&mut self) -> Call_Message {
        self.message.take().unwrap_or_else(|| Call_Message::new())
    }

    pub fn get_message<'a>(&'a self) -> &'a Call_Message {
        self.message.as_ref().unwrap_or_else(|| Call_Message::default_instance())
    }
}

impl ::protobuf::Message for Call {
    fn is_initialized(&self) -> bool {
        if self.executor_id.is_none() {
            return false;
        };
        if self.framework_id.is_none() {
            return false;
        };
        if self.field_type.is_none() {
            return false;
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    try!(::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.executor_id));
                },
                2 => {
                    try!(::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.framework_id));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = try!(is.read_enum());
                    self.field_type = ::std::option::Option::Some(tmp);
                },
                4 => {
                    try!(::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.subscribe));
                },
                5 => {
                    try!(::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.update));
                },
                6 => {
                    try!(::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.message));
                },
                _ => {
                    try!(::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields()));
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in self.executor_id.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in self.framework_id.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in self.field_type.iter() {
            my_size += ::protobuf::rt::enum_size(3, *value);
        };
        for value in self.subscribe.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in self.update.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in self.message.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.executor_id.as_ref() {
            try!(os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        if let Some(v) = self.framework_id.as_ref() {
            try!(os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        if let Some(v) = self.field_type {
            try!(os.write_enum(3, v.value()));
        };
        if let Some(v) = self.subscribe.as_ref() {
            try!(os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        if let Some(v) = self.update.as_ref() {
            try!(os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        if let Some(v) = self.message.as_ref() {
            try!(os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        try!(os.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields<'s>(&'s self) -> &'s ::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields<'s>(&'s mut self) -> &'s mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<Call>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for Call {
    fn new() -> Call {
        Call::new()
    }

    fn descriptor_static(_: ::std::option::Option<Call>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "executor_id",
                    Call::has_executor_id,
                    Call::get_executor_id,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "framework_id",
                    Call::has_framework_id,
                    Call::get_framework_id,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_enum_accessor(
                    "type",
                    Call::has_field_type,
                    Call::get_field_type,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "subscribe",
                    Call::has_subscribe,
                    Call::get_subscribe,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "update",
                    Call::has_update,
                    Call::get_update,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "message",
                    Call::has_message,
                    Call::get_message,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Call>(
                    "Call",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for Call {
    fn clear(&mut self) {
        self.clear_executor_id();
        self.clear_framework_id();
        self.clear_field_type();
        self.clear_subscribe();
        self.clear_update();
        self.clear_message();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for Call {
    fn eq(&self, other: &Call) -> bool {
        self.executor_id == other.executor_id &&
        self.framework_id == other.framework_id &&
        self.field_type == other.field_type &&
        self.subscribe == other.subscribe &&
        self.update == other.update &&
        self.message == other.message &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for Call {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,Default)]
pub struct Call_Subscribe {
    // message fields
    unacknowledged_tasks: ::protobuf::RepeatedField<super::mesos::TaskInfo>,
    unacknowledged_updates: ::protobuf::RepeatedField<Call_Update>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

impl Call_Subscribe {
    pub fn new() -> Call_Subscribe {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static Call_Subscribe {
        static mut instance: ::protobuf::lazy::Lazy<Call_Subscribe> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Call_Subscribe,
        };
        unsafe {
            instance.get(|| {
                Call_Subscribe {
                    unacknowledged_tasks: ::protobuf::RepeatedField::new(),
                    unacknowledged_updates: ::protobuf::RepeatedField::new(),
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // repeated .mesos.v1.TaskInfo unacknowledged_tasks = 1;

    pub fn clear_unacknowledged_tasks(&mut self) {
        self.unacknowledged_tasks.clear();
    }

    // Param is passed by value, moved
    pub fn set_unacknowledged_tasks(&mut self, v: ::protobuf::RepeatedField<super::mesos::TaskInfo>) {
        self.unacknowledged_tasks = v;
    }

    // Mutable pointer to the field.
    pub fn mut_unacknowledged_tasks<'a>(&'a mut self) -> &'a mut ::protobuf::RepeatedField<super::mesos::TaskInfo> {
        &mut self.unacknowledged_tasks
    }

    // Take field
    pub fn take_unacknowledged_tasks(&mut self) -> ::protobuf::RepeatedField<super::mesos::TaskInfo> {
        ::std::mem::replace(&mut self.unacknowledged_tasks, ::protobuf::RepeatedField::new())
    }

    pub fn get_unacknowledged_tasks<'a>(&'a self) -> &'a [super::mesos::TaskInfo] {
        &self.unacknowledged_tasks
    }

    // repeated .mesos.v1.executor.Call.Update unacknowledged_updates = 2;

    pub fn clear_unacknowledged_updates(&mut self) {
        self.unacknowledged_updates.clear();
    }

    // Param is passed by value, moved
    pub fn set_unacknowledged_updates(&mut self, v: ::protobuf::RepeatedField<Call_Update>) {
        self.unacknowledged_updates = v;
    }

    // Mutable pointer to the field.
    pub fn mut_unacknowledged_updates<'a>(&'a mut self) -> &'a mut ::protobuf::RepeatedField<Call_Update> {
        &mut self.unacknowledged_updates
    }

    // Take field
    pub fn take_unacknowledged_updates(&mut self) -> ::protobuf::RepeatedField<Call_Update> {
        ::std::mem::replace(&mut self.unacknowledged_updates, ::protobuf::RepeatedField::new())
    }

    pub fn get_unacknowledged_updates<'a>(&'a self) -> &'a [Call_Update] {
        &self.unacknowledged_updates
    }
}

impl ::protobuf::Message for Call_Subscribe {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    try!(::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.unacknowledged_tasks));
                },
                2 => {
                    try!(::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.unacknowledged_updates));
                },
                _ => {
                    try!(::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields()));
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in self.unacknowledged_tasks.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in self.unacknowledged_updates.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in self.unacknowledged_tasks.iter() {
            try!(os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        for v in self.unacknowledged_updates.iter() {
            try!(os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        try!(os.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields<'s>(&'s self) -> &'s ::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields<'s>(&'s mut self) -> &'s mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<Call_Subscribe>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for Call_Subscribe {
    fn new() -> Call_Subscribe {
        Call_Subscribe::new()
    }

    fn descriptor_static(_: ::std::option::Option<Call_Subscribe>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_message_accessor(
                    "unacknowledged_tasks",
                    Call_Subscribe::get_unacknowledged_tasks,
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_message_accessor(
                    "unacknowledged_updates",
                    Call_Subscribe::get_unacknowledged_updates,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Call_Subscribe>(
                    "Call_Subscribe",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for Call_Subscribe {
    fn clear(&mut self) {
        self.clear_unacknowledged_tasks();
        self.clear_unacknowledged_updates();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for Call_Subscribe {
    fn eq(&self, other: &Call_Subscribe) -> bool {
        self.unacknowledged_tasks == other.unacknowledged_tasks &&
        self.unacknowledged_updates == other.unacknowledged_updates &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for Call_Subscribe {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,Default)]
pub struct Call_Update {
    // message fields
    status: ::protobuf::SingularPtrField<super::mesos::TaskStatus>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

impl Call_Update {
    pub fn new() -> Call_Update {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static Call_Update {
        static mut instance: ::protobuf::lazy::Lazy<Call_Update> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Call_Update,
        };
        unsafe {
            instance.get(|| {
                Call_Update {
                    status: ::protobuf::SingularPtrField::none(),
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // required .mesos.v1.TaskStatus status = 1;

    pub fn clear_status(&mut self) {
        self.status.clear();
    }

    pub fn has_status(&self) -> bool {
        self.status.is_some()
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: super::mesos::TaskStatus) {
        self.status = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_status<'a>(&'a mut self) -> &'a mut super::mesos::TaskStatus {
        if self.status.is_none() {
            self.status.set_default();
        };
        self.status.as_mut().unwrap()
    }

    // Take field
    pub fn take_status(&mut self) -> super::mesos::TaskStatus {
        self.status.take().unwrap_or_else(|| super::mesos::TaskStatus::new())
    }

    pub fn get_status<'a>(&'a self) -> &'a super::mesos::TaskStatus {
        self.status.as_ref().unwrap_or_else(|| super::mesos::TaskStatus::default_instance())
    }
}

impl ::protobuf::Message for Call_Update {
    fn is_initialized(&self) -> bool {
        if self.status.is_none() {
            return false;
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    try!(::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.status));
                },
                _ => {
                    try!(::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields()));
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in self.status.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.status.as_ref() {
            try!(os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        try!(os.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields<'s>(&'s self) -> &'s ::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields<'s>(&'s mut self) -> &'s mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<Call_Update>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for Call_Update {
    fn new() -> Call_Update {
        Call_Update::new()
    }

    fn descriptor_static(_: ::std::option::Option<Call_Update>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "status",
                    Call_Update::has_status,
                    Call_Update::get_status,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Call_Update>(
                    "Call_Update",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for Call_Update {
    fn clear(&mut self) {
        self.clear_status();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for Call_Update {
    fn eq(&self, other: &Call_Update) -> bool {
        self.status == other.status &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for Call_Update {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,Default)]
pub struct Call_Message {
    // message fields
    data: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

impl Call_Message {
    pub fn new() -> Call_Message {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static Call_Message {
        static mut instance: ::protobuf::lazy::Lazy<Call_Message> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Call_Message,
        };
        unsafe {
            instance.get(|| {
                Call_Message {
                    data: ::protobuf::SingularField::none(),
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // required bytes data = 2;

    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    pub fn has_data(&self) -> bool {
        self.data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data<'a>(&'a mut self) -> &'a mut ::std::vec::Vec<u8> {
        if self.data.is_none() {
            self.data.set_default();
        };
        self.data.as_mut().unwrap()
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
        self.data.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_data<'a>(&'a self) -> &'a [u8] {
        match self.data.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
}

impl ::protobuf::Message for Call_Message {
    fn is_initialized(&self) -> bool {
        if self.data.is_none() {
            return false;
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                2 => {
                    try!(::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.data));
                },
                _ => {
                    try!(::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields()));
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in self.data.iter() {
            my_size += ::protobuf::rt::bytes_size(2, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.data.as_ref() {
            try!(os.write_bytes(2, &v));
        };
        try!(os.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields<'s>(&'s self) -> &'s ::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields<'s>(&'s mut self) -> &'s mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<Call_Message>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for Call_Message {
    fn new() -> Call_Message {
        Call_Message::new()
    }

    fn descriptor_static(_: ::std::option::Option<Call_Message>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor(
                    "data",
                    Call_Message::has_data,
                    Call_Message::get_data,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Call_Message>(
                    "Call_Message",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for Call_Message {
    fn clear(&mut self) {
        self.clear_data();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for Call_Message {
    fn eq(&self, other: &Call_Message) -> bool {
        self.data == other.data &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for Call_Message {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Call_Type {
    SUBSCRIBE = 1,
    UPDATE = 2,
    MESSAGE = 3,
}

impl ::protobuf::ProtobufEnum for Call_Type {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Call_Type> {
        match value {
            1 => ::std::option::Option::Some(Call_Type::SUBSCRIBE),
            2 => ::std::option::Option::Some(Call_Type::UPDATE),
            3 => ::std::option::Option::Some(Call_Type::MESSAGE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Call_Type] = &[
            Call_Type::SUBSCRIBE,
            Call_Type::UPDATE,
            Call_Type::MESSAGE,
        ];
        values
    }

    fn enum_descriptor_static(_: Option<Call_Type>) -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("Call_Type", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for Call_Type {
}

static file_descriptor_proto_data: &'static [u8] = &[
    0x0a, 0x20, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75,
    0x74, 0x6f, 0x72, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f,
    0x74, 0x6f, 0x12, 0x11, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x78, 0x65,
    0x63, 0x75, 0x74, 0x6f, 0x72, 0x1a, 0x14, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2f, 0x76, 0x31, 0x2f,
    0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x95, 0x07, 0x0a, 0x05,
    0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
    0x02, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x65,
    0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x79,
    0x70, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64,
    0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76,
    0x31, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
    0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x0c, 0x61,
    0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
    0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x78, 0x65,
    0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x6b, 0x6e,
    0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x12, 0x2f, 0x0a, 0x06, 0x6c, 0x61, 0x75, 0x6e,
    0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73,
    0x2e, 0x76, 0x31, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x45, 0x76, 0x65,
    0x6e, 0x74, 0x2e, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x12, 0x2b, 0x0a, 0x04, 0x6b, 0x69, 0x6c,
    0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e,
    0x76, 0x31, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e,
    0x74, 0x2e, 0x4b, 0x69, 0x6c, 0x6c, 0x12, 0x31, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
    0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e,
    0x76, 0x31, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e,
    0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x73, 0x68, 0x75,
    0x74, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x65,
    0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e,
    0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x2d,
    0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
    0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f,
    0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0x95, 0x01,
    0x0a, 0x0a, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x0d,
    0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20,
    0x02, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45,
    0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2f, 0x0a, 0x0e, 0x66,
    0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20,
    0x02, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46,
    0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x27, 0x0a, 0x0a,
    0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b,
    0x32, 0x13, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x65, 0x6e,
    0x74, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x2a, 0x0a, 0x06, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x12,
    0x20, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x12, 0x2e,
    0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66,
    0x6f, 0x1a, 0x29, 0x0a, 0x04, 0x4b, 0x69, 0x6c, 0x6c, 0x12, 0x21, 0x0a, 0x07, 0x74, 0x61, 0x73,
    0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x65, 0x73,
    0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x1a, 0x3f, 0x0a, 0x0c,
    0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x07,
    0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x10, 0x2e,
    0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12,
    0x0c, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x1a, 0x17, 0x0a,
    0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
    0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x1a, 0x2b, 0x0a, 0x08, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f,
    0x77, 0x6e, 0x12, 0x1f, 0x0a, 0x14, 0x67, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69,
    0x6f, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01,
    0x3a, 0x01, 0x35, 0x1a, 0x18, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x0f, 0x0a, 0x07,
    0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x22, 0x64, 0x0a,
    0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49,
    0x42, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x41, 0x55, 0x4e, 0x43, 0x48, 0x10,
    0x02, 0x12, 0x08, 0x0a, 0x04, 0x4b, 0x49, 0x4c, 0x4c, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x41,
    0x43, 0x4b, 0x4e, 0x4f, 0x57, 0x4c, 0x45, 0x44, 0x47, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0b, 0x0a,
    0x07, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x48,
    0x55, 0x54, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f,
    0x52, 0x10, 0x07, 0x22, 0x9a, 0x04, 0x0a, 0x04, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x29, 0x0a, 0x0b,
    0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
    0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65,
    0x63, 0x75, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x0c, 0x66, 0x72, 0x61, 0x6d, 0x65,
    0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x15, 0x2e,
    0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f,
    0x72, 0x6b, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x02,
    0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x78,
    0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x2e, 0x54, 0x79, 0x70, 0x65,
    0x12, 0x34, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x04, 0x20,
    0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x65,
    0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x2e, 0x53, 0x75, 0x62,
    0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
    0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76,
    0x31, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x2e,
    0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
    0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e,
    0x76, 0x31, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x61, 0x6c, 0x6c,
    0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x7d, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73,
    0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x75, 0x6e, 0x61, 0x63, 0x6b, 0x6e, 0x6f,
    0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x01, 0x20,
    0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54,
    0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3e, 0x0a, 0x16, 0x75, 0x6e, 0x61, 0x63, 0x6b,
    0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
    0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e,
    0x76, 0x31, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x61, 0x6c, 0x6c,
    0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x1a, 0x2e, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74,
    0x65, 0x12, 0x24, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28,
    0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73,
    0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x17, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61,
    0x67, 0x65, 0x12, 0x0c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c,
    0x22, 0x2e, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x42, 0x53,
    0x43, 0x52, 0x49, 0x42, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x50, 0x44, 0x41, 0x54,
    0x45, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x03,
    0x42, 0x26, 0x0a, 0x1c, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x6d,
    0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72,
    0x42, 0x06, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x4a, 0xbd, 0x37, 0x0a, 0x07, 0x12, 0x05, 0x10,
    0x00, 0xaf, 0x01, 0x01, 0x0a, 0x09, 0x0a, 0x02, 0x03, 0x00, 0x12, 0x03, 0x10, 0x07, 0x1d, 0x0a,
    0x08, 0x0a, 0x01, 0x02, 0x12, 0x03, 0x12, 0x08, 0x19, 0x0a, 0x08, 0x0a, 0x01, 0x08, 0x12, 0x03,
    0x14, 0x00, 0x35, 0x0a, 0x0b, 0x0a, 0x04, 0x08, 0xe7, 0x07, 0x00, 0x12, 0x03, 0x14, 0x00, 0x35,
    0x0a, 0x0c, 0x0a, 0x05, 0x08, 0xe7, 0x07, 0x00, 0x02, 0x12, 0x03, 0x14, 0x07, 0x13, 0x0a, 0x0d,
    0x0a, 0x06, 0x08, 0xe7, 0x07, 0x00, 0x02, 0x00, 0x12, 0x03, 0x14, 0x07, 0x13, 0x0a, 0x0e, 0x0a,
    0x07, 0x08, 0xe7, 0x07, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x14, 0x07, 0x13, 0x0a, 0x0c, 0x0a,
    0x05, 0x08, 0xe7, 0x07, 0x00, 0x07, 0x12, 0x03, 0x14, 0x16, 0x34, 0x0a, 0x08, 0x0a, 0x01, 0x08,
    0x12, 0x03, 0x15, 0x00, 0x27, 0x0a, 0x0b, 0x0a, 0x04, 0x08, 0xe7, 0x07, 0x01, 0x12, 0x03, 0x15,
    0x00, 0x27, 0x0a, 0x0c, 0x0a, 0x05, 0x08, 0xe7, 0x07, 0x01, 0x02, 0x12, 0x03, 0x15, 0x07, 0x1b,
    0x0a, 0x0d, 0x0a, 0x06, 0x08, 0xe7, 0x07, 0x01, 0x02, 0x00, 0x12, 0x03, 0x15, 0x07, 0x1b, 0x0a,
    0x0e, 0x0a, 0x07, 0x08, 0xe7, 0x07, 0x01, 0x02, 0x00, 0x01, 0x12, 0x03, 0x15, 0x07, 0x1b, 0x0a,
    0x0c, 0x0a, 0x05, 0x08, 0xe7, 0x07, 0x01, 0x07, 0x12, 0x03, 0x15, 0x1e, 0x26, 0x0a, 0xb9, 0x01,
    0x0a, 0x02, 0x04, 0x00, 0x12, 0x04, 0x1e, 0x00, 0x74, 0x01, 0x1a, 0xac, 0x01, 0x2a, 0x0a, 0x20,
    0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x41,
    0x50, 0x49, 0x2e, 0x0a, 0x0a, 0x20, 0x41, 0x6e, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x69,
    0x73, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x20, 0x75, 0x73, 0x69, 0x6e,
    0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x20, 0x70,
    0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x20, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x20, 0x22,
    0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x22, 0x0a, 0x20, 0x74, 0x72, 0x69, 0x63, 0x6b, 0x2c, 0x20, 0x73,
    0x65, 0x65, 0x20, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x64, 0x65, 0x76, 0x65, 0x6c,
    0x6f, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d,
    0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2d, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
    0x73, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2f, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x71, 0x75, 0x65,
    0x73, 0x23, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x2e, 0x0a, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x00, 0x01,
    0x12, 0x03, 0x1e, 0x08, 0x0d, 0x0a, 0x55, 0x0a, 0x04, 0x04, 0x00, 0x04, 0x00, 0x12, 0x04, 0x21,
    0x02, 0x29, 0x03, 0x1a, 0x47, 0x20, 0x50, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x20, 0x65,
    0x76, 0x65, 0x6e, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2c, 0x20, 0x66, 0x6f, 0x6c, 0x6c,
    0x6f, 0x77, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x20,
    0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x69, 0x66, 0x0a, 0x20,
    0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x00, 0x04, 0x00, 0x01, 0x12, 0x03, 0x21, 0x07, 0x0b, 0x0a, 0x28, 0x0a, 0x06, 0x04, 0x00,
    0x04, 0x00, 0x02, 0x00, 0x12, 0x03, 0x22, 0x04, 0x13, 0x22, 0x19, 0x20, 0x53, 0x65, 0x65, 0x20,
    0x27, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x27, 0x20, 0x62, 0x65, 0x6c,
    0x6f, 0x77, 0x2e, 0x0a, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x00, 0x01, 0x12,
    0x03, 0x22, 0x04, 0x0e, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x00, 0x02, 0x12,
    0x03, 0x22, 0x11, 0x12, 0x0a, 0x24, 0x0a, 0x06, 0x04, 0x00, 0x04, 0x00, 0x02, 0x01, 0x12, 0x03,
    0x23, 0x04, 0x0f, 0x22, 0x15, 0x20, 0x53, 0x65, 0x65, 0x20, 0x27, 0x4c, 0x61, 0x75, 0x6e, 0x63,
    0x68, 0x27, 0x20, 0x62, 0x65, 0x6c, 0x6f, 0x77, 0x2e, 0x0a, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00,
    0x04, 0x00, 0x02, 0x01, 0x01, 0x12, 0x03, 0x23, 0x04, 0x0a, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00,
    0x04, 0x00, 0x02, 0x01, 0x02, 0x12, 0x03, 0x23, 0x0d, 0x0e, 0x0a, 0x22, 0x0a, 0x06, 0x04, 0x00,
    0x04, 0x00, 0x02, 0x02, 0x12, 0x03, 0x24, 0x04, 0x0d, 0x22, 0x13, 0x20, 0x53, 0x65, 0x65, 0x20,
    0x27, 0x4b, 0x69, 0x6c, 0x6c, 0x27, 0x20, 0x62, 0x65, 0x6c, 0x6f, 0x77, 0x2e, 0x0a, 0x0a, 0x0e,
    0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x02, 0x01, 0x12, 0x03, 0x24, 0x04, 0x08, 0x0a, 0x0e,
    0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x02, 0x02, 0x12, 0x03, 0x24, 0x0b, 0x0c, 0x0a, 0x2a,
    0x0a, 0x06, 0x04, 0x00, 0x04, 0x00, 0x02, 0x03, 0x12, 0x03, 0x25, 0x04, 0x15, 0x22, 0x1b, 0x20,
    0x53, 0x65, 0x65, 0x20, 0x27, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
    0x64, 0x27, 0x20, 0x62, 0x65, 0x6c, 0x6f, 0x77, 0x2e, 0x0a, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00,
    0x04, 0x00, 0x02, 0x03, 0x01, 0x12, 0x03, 0x25, 0x04, 0x10, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00,
    0x04, 0x00, 0x02, 0x03, 0x02, 0x12, 0x03, 0x25, 0x13, 0x14, 0x0a, 0x25, 0x0a, 0x06, 0x04, 0x00,
    0x04, 0x00, 0x02, 0x04, 0x12, 0x03, 0x26, 0x04, 0x10, 0x22, 0x16, 0x20, 0x53, 0x65, 0x65, 0x20,
    0x27, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x27, 0x20, 0x62, 0x65, 0x6c, 0x6f, 0x77, 0x2e,
    0x0a, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x04, 0x01, 0x12, 0x03, 0x26, 0x04,
    0x0b, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x04, 0x02, 0x12, 0x03, 0x26, 0x0e,
    0x0f, 0x0a, 0x26, 0x0a, 0x06, 0x04, 0x00, 0x04, 0x00, 0x02, 0x05, 0x12, 0x03, 0x27, 0x04, 0x11,
    0x22, 0x17, 0x20, 0x53, 0x65, 0x65, 0x20, 0x27, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e,
    0x27, 0x20, 0x62, 0x65, 0x6c, 0x6f, 0x77, 0x2e, 0x0a, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04,
    0x00, 0x02, 0x05, 0x01, 0x12, 0x03, 0x27, 0x04, 0x0c, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04,
    0x00, 0x02, 0x05, 0x02, 0x12, 0x03, 0x27, 0x0f, 0x10, 0x0a, 0x23, 0x0a, 0x06, 0x04, 0x00, 0x04,
    0x00, 0x02, 0x06, 0x12, 0x03, 0x28, 0x04, 0x0e, 0x22, 0x14, 0x20, 0x53, 0x65, 0x65, 0x20, 0x27,
    0x45, 0x72, 0x72, 0x6f, 0x72, 0x27, 0x20, 0x62, 0x65, 0x6c, 0x6f, 0x77, 0x2e, 0x0a, 0x0a, 0x0e,
    0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x06, 0x01, 0x12, 0x03, 0x28, 0x04, 0x09, 0x0a, 0x0e,
    0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x06, 0x02, 0x12, 0x03, 0x28, 0x0c, 0x0d, 0x0a, 0x77,
    0x0a, 0x04, 0x04, 0x00, 0x03, 0x00, 0x12, 0x04, 0x2d, 0x03, 0x31, 0x03, 0x1a, 0x69, 0x20, 0x46,
    0x69, 0x72, 0x73, 0x74, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69,
    0x76, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x78, 0x65,
    0x63, 0x75, 0x74, 0x6f, 0x72, 0x20, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x73,
    0x2e, 0x0a, 0x20, 0x54, 0x68, 0x65, 0x20, 0x27, 0x69, 0x64, 0x27, 0x20, 0x66, 0x69, 0x65, 0x6c,
    0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x27, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77,
    0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x27, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62,
    0x65, 0x20, 0x73, 0x65, 0x74, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x03, 0x00, 0x01,
    0x12, 0x03, 0x2d, 0x0b, 0x15, 0x0a, 0x0d, 0x0a, 0x06, 0x04, 0x00, 0x03, 0x00, 0x02, 0x00, 0x12,
    0x03, 0x2e, 0x04, 0x2c, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x00, 0x02, 0x00, 0x04, 0x12,
    0x03, 0x2e, 0x04, 0x0c, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x00, 0x02, 0x00, 0x06, 0x12,
    0x03, 0x2e, 0x0d, 0x19, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x00, 0x02, 0x00, 0x01, 0x12,
    0x03, 0x2e, 0x1a, 0x27, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x00, 0x02, 0x00, 0x03, 0x12,
    0x03, 0x2e, 0x2a, 0x2b, 0x0a, 0x0d, 0x0a, 0x06, 0x04, 0x00, 0x03, 0x00, 0x02, 0x01, 0x12, 0x03,
    0x2f, 0x04, 0x2e, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x00, 0x02, 0x01, 0x04, 0x12, 0x03,
    0x2f, 0x04, 0x0c, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x00, 0x02, 0x01, 0x06, 0x12, 0x03,
    0x2f, 0x0d, 0x1a, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x00, 0x02, 0x01, 0x01, 0x12, 0x03,
    0x2f, 0x1b, 0x29, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x00, 0x02, 0x01, 0x03, 0x12, 0x03,
    0x2f, 0x2c, 0x2d, 0x0a, 0x0d, 0x0a, 0x06, 0x04, 0x00, 0x03, 0x00, 0x02, 0x02, 0x12, 0x03, 0x30,
    0x04, 0x26, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x00, 0x02, 0x02, 0x04, 0x12, 0x03, 0x30,
    0x04, 0x0c, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x00, 0x02, 0x02, 0x06, 0x12, 0x03, 0x30,
    0x0d, 0x16, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x00, 0x02, 0x02, 0x01, 0x12, 0x03, 0x30,
    0x17, 0x21, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x00, 0x02, 0x02, 0x03, 0x12, 0x03, 0x30,
    0x24, 0x25, 0x0a, 0xc9, 0x01, 0x0a, 0x04, 0x04, 0x00, 0x03, 0x01, 0x12, 0x04, 0x36, 0x02, 0x38,
    0x03, 0x1a, 0xba, 0x01, 0x20, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x20, 0x77, 0x68,
    0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b,
    0x20, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x6c, 0x61, 0x75,
    0x6e, 0x63, 0x68, 0x20, 0x61, 0x20, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x20, 0x4f, 0x6e, 0x63, 0x65,
    0x0a, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x61, 0x73, 0x6b, 0x20, 0x69, 0x73, 0x20, 0x73, 0x75,
    0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x20, 0x6c, 0x61, 0x75, 0x6e, 0x63,
    0x68, 0x65, 0x64, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f,
    0x72, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x20, 0x77,
    0x69, 0x74, 0x68, 0x0a, 0x20, 0x61, 0x20, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x52, 0x55, 0x4e, 0x4e,
    0x49, 0x4e, 0x47, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x28, 0x53, 0x65, 0x65, 0x20,
    0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x76, 0x31, 0x2f,
    0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x29, 0x2e, 0x0a, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x00, 0x03, 0x01, 0x01, 0x12, 0x03, 0x36, 0x0a, 0x10, 0x0a, 0x0d, 0x0a, 0x06,
    0x04, 0x00, 0x03, 0x01, 0x02, 0x00, 0x12, 0x03, 0x37, 0x04, 0x1f, 0x0a, 0x0e, 0x0a, 0x07, 0x04,
    0x00, 0x03, 0x01, 0x02, 0x00, 0x04, 0x12, 0x03, 0x37, 0x04, 0x0c, 0x0a, 0x0e, 0x0a, 0x07, 0x04,
    0x00, 0x03, 0x01, 0x02, 0x00, 0x06, 0x12, 0x03, 0x37, 0x0d, 0x15, 0x0a, 0x0e, 0x0a, 0x07, 0x04,
    0x00, 0x03, 0x01, 0x02, 0x00, 0x01, 0x12, 0x03, 0x37, 0x16, 0x1a, 0x0a, 0x0e, 0x0a, 0x07, 0x04,
    0x00, 0x03, 0x01, 0x02, 0x00, 0x03, 0x12, 0x03, 0x37, 0x1d, 0x1e, 0x0a, 0x89, 0x02, 0x0a, 0x04,
    0x04, 0x00, 0x03, 0x02, 0x12, 0x04, 0x3e, 0x02, 0x40, 0x03, 0x1a, 0xfa, 0x01, 0x20, 0x52, 0x65,
    0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20,
    0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x20, 0x77, 0x61, 0x6e, 0x74, 0x73, 0x20,
    0x74, 0x6f, 0x20, 0x6b, 0x69, 0x6c, 0x6c, 0x20, 0x61, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
    0x69, 0x63, 0x20, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x20, 0x4f, 0x6e, 0x63, 0x65, 0x0a, 0x20, 0x74,
    0x68, 0x65, 0x20, 0x74, 0x61, 0x73, 0x6b, 0x20, 0x69, 0x73, 0x20, 0x74, 0x65, 0x72, 0x6d, 0x69,
    0x6e, 0x61, 0x74, 0x65, 0x64, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75,
    0x74, 0x6f, 0x72, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x73, 0x65, 0x6e, 0x64, 0x20,
    0x61, 0x20, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x4b, 0x49, 0x4c, 0x4c, 0x45, 0x44, 0x0a, 0x20, 0x28,
    0x6f, 0x72, 0x20, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x29, 0x20,
    0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x20, 0x74, 0x65, 0x72, 0x6d,
    0x69, 0x6e, 0x61, 0x6c, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x69, 0x73, 0x20, 0x6e,
    0x65, 0x63, 0x65, 0x73, 0x73, 0x61, 0x72, 0x79, 0x20, 0x73, 0x6f, 0x0a, 0x20, 0x4d, 0x65, 0x73,
    0x6f, 0x73, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x74,
    0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x20, 0x61, 0x73, 0x73,
    0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65,
    0x20, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x03, 0x02, 0x01,
    0x12, 0x03, 0x3e, 0x0a, 0x0e, 0x0a, 0x0d, 0x0a, 0x06, 0x04, 0x00, 0x03, 0x02, 0x02, 0x00, 0x12,
    0x03, 0x3f, 0x04, 0x20, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x02, 0x02, 0x00, 0x04, 0x12,
    0x03, 0x3f, 0x04, 0x0c, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x02, 0x02, 0x00, 0x06, 0x12,
    0x03, 0x3f, 0x0d, 0x13, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x02, 0x02, 0x00, 0x01, 0x12,
    0x03, 0x3f, 0x14, 0x1b, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x02, 0x02, 0x00, 0x03, 0x12,
    0x03, 0x3f, 0x1e, 0x1f, 0x0a, 0xd7, 0x02, 0x0a, 0x04, 0x04, 0x00, 0x03, 0x03, 0x12, 0x04, 0x48,
    0x02, 0x4b, 0x03, 0x1a, 0xc8, 0x02, 0x20, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x20,
    0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x20, 0x61,
    0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20,
    0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75,
    0x73, 0x0a, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x20, 0x53, 0x63, 0x68, 0x65, 0x64,
    0x75, 0x6c, 0x65, 0x72, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
    0x73, 0x69, 0x62, 0x6c, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63,
    0x69, 0x74, 0x6c, 0x79, 0x20, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x69,
    0x6e, 0x67, 0x0a, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x20,
    0x6f, 0x66, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
    0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x27, 0x75, 0x70, 0x64,
    0x61, 0x74, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x28, 0x29, 0x2e, 0x75, 0x75, 0x69,
    0x64, 0x28, 0x29, 0x27, 0x0a, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x73, 0x65, 0x74, 0x2e,
    0x20, 0x55, 0x6e, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x20,
    0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x72,
    0x65, 0x74, 0x72, 0x69, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x78,
    0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x0a, 0x20, 0x54, 0x68, 0x65, 0x79, 0x20, 0x73, 0x68,
    0x6f, 0x75, 0x6c, 0x64, 0x20, 0x61, 0x6c, 0x73, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x73, 0x65, 0x6e,
    0x74, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f,
    0x72, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x65, 0x76, 0x65, 0x72, 0x20, 0x69, 0x74, 0x0a, 0x20, 0x72,
    0x65, 0x2d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x73, 0x2e, 0x0a, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x00, 0x03, 0x03, 0x01, 0x12, 0x03, 0x48, 0x0a, 0x16, 0x0a, 0x0d, 0x0a, 0x06,
    0x04, 0x00, 0x03, 0x03, 0x02, 0x00, 0x12, 0x03, 0x49, 0x04, 0x20, 0x0a, 0x0e, 0x0a, 0x07, 0x04,
    0x00, 0x03, 0x03, 0x02, 0x00, 0x04, 0x12, 0x03, 0x49, 0x04, 0x0c, 0x0a, 0x0e, 0x0a, 0x07, 0x04,
    0x00, 0x03, 0x03, 0x02, 0x00, 0x06, 0x12, 0x03, 0x49, 0x0d, 0x13, 0x0a, 0x0e, 0x0a, 0x07, 0x04,
    0x00, 0x03, 0x03, 0x02, 0x00, 0x01, 0x12, 0x03, 0x49, 0x14, 0x1b, 0x0a, 0x0e, 0x0a, 0x07, 0x04,
    0x00, 0x03, 0x03, 0x02, 0x00, 0x03, 0x12, 0x03, 0x49, 0x1e, 0x1f, 0x0a, 0x0d, 0x0a, 0x06, 0x04,
    0x00, 0x03, 0x03, 0x02, 0x01, 0x12, 0x03, 0x4a, 0x04, 0x1c, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00,
    0x03, 0x03, 0x02, 0x01, 0x04, 0x12, 0x03, 0x4a, 0x04, 0x0c, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00,
    0x03, 0x03, 0x02, 0x01, 0x05, 0x12, 0x03, 0x4a, 0x0d, 0x12, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00,
    0x03, 0x03, 0x02, 0x01, 0x01, 0x12, 0x03, 0x4a, 0x13, 0x17, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00,
    0x03, 0x03, 0x02, 0x01, 0x03, 0x12, 0x03, 0x4a, 0x1a, 0x1b, 0x0a, 0xb1, 0x02, 0x0a, 0x04, 0x04,
    0x00, 0x03, 0x04, 0x12, 0x04, 0x52, 0x02, 0x54, 0x03, 0x1a, 0xa2, 0x02, 0x20, 0x52, 0x65, 0x63,
    0x65, 0x69, 0x76, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x61, 0x20, 0x63, 0x75, 0x73,
    0x74, 0x6f, 0x6d, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x20, 0x67, 0x65, 0x6e, 0x65,
    0x72, 0x61, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x63, 0x68,
    0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x20, 0x69, 0x73, 0x0a, 0x20, 0x66, 0x6f, 0x72, 0x77, 0x61,
    0x72, 0x64, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x67, 0x65, 0x6e,
    0x74, 0x2e, 0x20, 0x4e, 0x6f, 0x74, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68, 0x69,
    0x73, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74,
    0x0a, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79,
    0x20, 0x4d, 0x65, 0x73, 0x6f, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x69, 0x73, 0x20, 0x6f, 0x6e,
    0x6c, 0x79, 0x20, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x20, 0x28, 0x77, 0x69,
    0x74, 0x68, 0x6f, 0x75, 0x74, 0x20, 0x72, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
    0x79, 0x0a, 0x20, 0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x73, 0x29, 0x20, 0x74,
    0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x20,
    0x49, 0x74, 0x20, 0x69, 0x73, 0x20, 0x75, 0x70, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20,
    0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x74,
    0x72, 0x79, 0x0a, 0x20, 0x69, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61,
    0x67, 0x65, 0x20, 0x69, 0x73, 0x20, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x20, 0x66, 0x6f,
    0x72, 0x20, 0x61, 0x6e, 0x79, 0x20, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x2e, 0x0a, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x00, 0x03, 0x04, 0x01, 0x12, 0x03, 0x52, 0x0a, 0x11, 0x0a, 0x0d, 0x0a, 0x06,
    0x04, 0x00, 0x03, 0x04, 0x02, 0x00, 0x12, 0x03, 0x53, 0x04, 0x1c, 0x0a, 0x0e, 0x0a, 0x07, 0x04,
    0x00, 0x03, 0x04, 0x02, 0x00, 0x04, 0x12, 0x03, 0x53, 0x04, 0x0c, 0x0a, 0x0e, 0x0a, 0x07, 0x04,
    0x00, 0x03, 0x04, 0x02, 0x00, 0x05, 0x12, 0x03, 0x53, 0x0d, 0x12, 0x0a, 0x0e, 0x0a, 0x07, 0x04,
    0x00, 0x03, 0x04, 0x02, 0x00, 0x01, 0x12, 0x03, 0x53, 0x13, 0x17, 0x0a, 0x0e, 0x0a, 0x07, 0x04,
    0x00, 0x03, 0x04, 0x02, 0x00, 0x03, 0x12, 0x03, 0x53, 0x1a, 0x1b, 0x0a, 0xcd, 0x03, 0x0a, 0x04,
    0x04, 0x00, 0x03, 0x05, 0x12, 0x04, 0x5c, 0x02, 0x5e, 0x03, 0x1a, 0xbe, 0x03, 0x20, 0x52, 0x65,
    0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20,
    0x61, 0x67, 0x65, 0x6e, 0x74, 0x20, 0x61, 0x73, 0x6b, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65,
    0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x68, 0x75, 0x74, 0x64,
    0x6f, 0x77, 0x6e, 0x2f, 0x6b, 0x69, 0x6c, 0x6c, 0x20, 0x69, 0x74, 0x73, 0x65, 0x6c, 0x66, 0x2e,
    0x20, 0x54, 0x68, 0x65, 0x0a, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x20, 0x69,
    0x73, 0x20, 0x74, 0x68, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x20,
    0x74, 0x6f, 0x20, 0x6b, 0x69, 0x6c, 0x6c, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x69, 0x74, 0x73, 0x20,
    0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x20, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2c, 0x20, 0x73, 0x65,
    0x6e, 0x64, 0x20, 0x27, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x4b, 0x49, 0x4c, 0x4c, 0x45, 0x44, 0x27,
    0x0a, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
    0x20, 0x61, 0x6e, 0x64, 0x20, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x20,
    0x65, 0x78, 0x69, 0x74, 0x2e, 0x20, 0x49, 0x66, 0x20, 0x61, 0x6e, 0x20, 0x65, 0x78, 0x65, 0x63,
    0x75, 0x74, 0x6f, 0x72, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x74, 0x65,
    0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x0a, 0x20, 0x77, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x20,
    0x61, 0x20, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x20, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
    0x20, 0x28, 0x27, 0x67, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f,
    0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x27, 0x29, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61,
    0x67, 0x65, 0x6e, 0x74, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x66,
    0x75, 0x6c, 0x6c, 0x79, 0x0a, 0x20, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x20, 0x74, 0x68,
    0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x20, 0x77, 0x68, 0x65, 0x72,
    0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x20, 0x69,
    0x73, 0x20, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x20, 0x61,
    0x67, 0x65, 0x6e, 0x74, 0x20, 0x77, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x74, 0x68, 0x65, 0x6e, 0x0a,
    0x20, 0x73, 0x65, 0x6e, 0x64, 0x20, 0x27, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x4c, 0x4f, 0x53, 0x54,
    0x27, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x6e,
    0x79, 0x20, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x63, 0x74, 0x69,
    0x76, 0x65, 0x20, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x69, 0x73,
    0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x00, 0x03, 0x05, 0x01, 0x12, 0x03, 0x5c, 0x0a, 0x12, 0x0a, 0x0d, 0x0a, 0x06, 0x04, 0x00, 0x03,
    0x05, 0x02, 0x00, 0x12, 0x03, 0x5d, 0x04, 0x3d, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x05,
    0x02, 0x00, 0x04, 0x12, 0x03, 0x5d, 0x04, 0x0c, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x05,
    0x02, 0x00, 0x05, 0x12, 0x03, 0x5d, 0x0d, 0x13, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x05,
    0x02, 0x00, 0x01, 0x12, 0x03, 0x5d, 0x14, 0x28, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x05,
    0x02, 0x00, 0x03, 0x12, 0x03, 0x5d, 0x2b, 0x2c, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x05,
    0x02, 0x00, 0x08, 0x12, 0x03, 0x5d, 0x2d, 0x3c, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x05,
    0x02, 0x00, 0x07, 0x12, 0x03, 0x5d, 0x38, 0x3b, 0x0a, 0xf9, 0x01, 0x0a, 0x04, 0x04, 0x00, 0x03,
    0x06, 0x12, 0x04, 0x65, 0x02, 0x67, 0x03, 0x1a, 0xea, 0x01, 0x20, 0x52, 0x65, 0x63, 0x65, 0x69,
    0x76, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x63, 0x61, 0x73, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20,
    0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x20, 0x73, 0x65, 0x6e, 0x64, 0x73, 0x20, 0x69,
    0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x20, 0x28, 0x65, 0x2e,
    0x67, 0x2e, 0x2c, 0x0a, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x20, 0x76, 0x61,
    0x6c, 0x75, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x65, 0x74, 0x29, 0x2e, 0x0a, 0x20,
    0x54, 0x4f, 0x44, 0x4f, 0x28, 0x61, 0x72, 0x6f, 0x6a, 0x61, 0x73, 0x29, 0x3a, 0x20, 0x52, 0x65,
    0x6d, 0x6f, 0x76, 0x65, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x6f, 0x6e, 0x63, 0x65, 0x20, 0x74,
    0x68, 0x65, 0x20, 0x6f, 0x6c, 0x64, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x20,
    0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x0a, 0x20, 0x6c, 0x6f,
    0x6e, 0x67, 0x65, 0x72, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x2e, 0x20,
    0x57, 0x69, 0x74, 0x68, 0x20, 0x48, 0x54, 0x54, 0x50, 0x20, 0x41, 0x50, 0x49, 0x20, 0x61, 0x6c,
    0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65,
    0x20, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x65, 0x64, 0x20, 0x76, 0x69, 0x61, 0x0a, 0x20, 0x48,
    0x54, 0x54, 0x50, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x63, 0x6f, 0x64,
    0x65, 0x73, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x03, 0x06, 0x01, 0x12, 0x03, 0x65,
    0x0a, 0x0f, 0x0a, 0x0d, 0x0a, 0x06, 0x04, 0x00, 0x03, 0x06, 0x02, 0x00, 0x12, 0x03, 0x66, 0x04,
    0x20, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x06, 0x02, 0x00, 0x04, 0x12, 0x03, 0x66, 0x04,
    0x0c, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x06, 0x02, 0x00, 0x05, 0x12, 0x03, 0x66, 0x0d,
    0x13, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x06, 0x02, 0x00, 0x01, 0x12, 0x03, 0x66, 0x14,
    0x1b, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x06, 0x02, 0x00, 0x03, 0x12, 0x03, 0x66, 0x1e,
    0x1f, 0x0a, 0x87, 0x01, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x00, 0x12, 0x03, 0x6b, 0x02, 0x19, 0x1a,
    0x7a, 0x20, 0x54, 0x79, 0x70, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x76,
    0x65, 0x6e, 0x74, 0x2c, 0x20, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x20, 0x77,
    0x68, 0x69, 0x63, 0x68, 0x20, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x66, 0x69,
    0x65, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x6c, 0x6f, 0x77, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64,
    0x20, 0x62, 0x65, 0x0a, 0x20, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x20, 0x69, 0x66, 0x20,
    0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x68, 0x61, 0x73, 0x20, 0x61, 0x20,
    0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x20, 0x64,
    0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x00, 0x02, 0x00, 0x04, 0x12, 0x03, 0x6b, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02,
    0x00, 0x06, 0x12, 0x03, 0x6b, 0x0b, 0x0f, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x01,
    0x12, 0x03, 0x6b, 0x10, 0x14, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x03, 0x12, 0x03,
    0x6b, 0x17, 0x18, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x01, 0x12, 0x03, 0x6d, 0x02, 0x25,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x04, 0x12, 0x03, 0x6d, 0x02, 0x0a, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x06, 0x12, 0x03, 0x6d, 0x0b, 0x15, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x00, 0x02, 0x01, 0x01, 0x12, 0x03, 0x6d, 0x16, 0x20, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00,
    0x02, 0x01, 0x03, 0x12, 0x03, 0x6d, 0x23, 0x24, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x02,
    0x12, 0x03, 0x6e, 0x02, 0x29, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x02, 0x04, 0x12, 0x03,
    0x6e, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x02, 0x06, 0x12, 0x03, 0x6e, 0x0b,
    0x17, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x02, 0x01, 0x12, 0x03, 0x6e, 0x18, 0x24, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x02, 0x03, 0x12, 0x03, 0x6e, 0x27, 0x28, 0x0a, 0x0b, 0x0a,
    0x04, 0x04, 0x00, 0x02, 0x03, 0x12, 0x03, 0x6f, 0x02, 0x1d, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00,
    0x02, 0x03, 0x04, 0x12, 0x03, 0x6f, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x03,
    0x06, 0x12, 0x03, 0x6f, 0x0b, 0x11, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x03, 0x01, 0x12,
    0x03, 0x6f, 0x12, 0x18, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x03, 0x03, 0x12, 0x03, 0x6f,
    0x1b, 0x1c, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x04, 0x12, 0x03, 0x70, 0x02, 0x19, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x04, 0x04, 0x12, 0x03, 0x70, 0x02, 0x0a, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x00, 0x02, 0x04, 0x06, 0x12, 0x03, 0x70, 0x0b, 0x0f, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x00, 0x02, 0x04, 0x01, 0x12, 0x03, 0x70, 0x10, 0x14, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02,
    0x04, 0x03, 0x12, 0x03, 0x70, 0x17, 0x18, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x05, 0x12,
    0x03, 0x71, 0x02, 0x1f, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x05, 0x04, 0x12, 0x03, 0x71,
    0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x05, 0x06, 0x12, 0x03, 0x71, 0x0b, 0x12,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x05, 0x01, 0x12, 0x03, 0x71, 0x13, 0x1a, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x00, 0x02, 0x05, 0x03, 0x12, 0x03, 0x71, 0x1d, 0x1e, 0x0a, 0x0b, 0x0a, 0x04,
    0x04, 0x00, 0x02, 0x06, 0x12, 0x03, 0x72, 0x02, 0x21, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02,
    0x06, 0x04, 0x12, 0x03, 0x72, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x06, 0x06,
    0x12, 0x03, 0x72, 0x0b, 0x13, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x06, 0x01, 0x12, 0x03,
    0x72, 0x14, 0x1c, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x06, 0x03, 0x12, 0x03, 0x72, 0x1f,
    0x20, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x07, 0x12, 0x03, 0x73, 0x02, 0x1b, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x00, 0x02, 0x07, 0x04, 0x12, 0x03, 0x73, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x00, 0x02, 0x07, 0x06, 0x12, 0x03, 0x73, 0x0b, 0x10, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00,
    0x02, 0x07, 0x01, 0x12, 0x03, 0x73, 0x11, 0x16, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x07,
    0x03, 0x12, 0x03, 0x73, 0x19, 0x1a, 0x0a, 0x84, 0x01, 0x0a, 0x02, 0x04, 0x01, 0x12, 0x05, 0x7d,
    0x01, 0xaf, 0x01, 0x01, 0x1a, 0x77, 0x2a, 0x0a, 0x20, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f,
    0x72, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x20, 0x41, 0x50, 0x49, 0x2e, 0x0a, 0x0a, 0x20, 0x4c, 0x69,
    0x6b, 0x65, 0x20, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2c, 0x20, 0x61, 0x20, 0x43, 0x61, 0x6c, 0x6c,
    0x20, 0x69, 0x73, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x20, 0x75, 0x73,
    0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
    0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x20, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
    0x0a, 0x20, 0x22, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x22, 0x20, 0x74, 0x72, 0x69, 0x63, 0x6b, 0x20,
    0x28, 0x73, 0x65, 0x65, 0x20, 0x61, 0x62, 0x6f, 0x76, 0x65, 0x29, 0x2e, 0x0a, 0x0a, 0x0a, 0x0a,
    0x03, 0x04, 0x01, 0x01, 0x12, 0x03, 0x7d, 0x09, 0x0d, 0x0a, 0x56, 0x0a, 0x04, 0x04, 0x01, 0x04,
    0x00, 0x12, 0x06, 0x80, 0x01, 0x02, 0x84, 0x01, 0x03, 0x1a, 0x46, 0x20, 0x50, 0x6f, 0x73, 0x73,
    0x69, 0x62, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x20, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2c,
    0x20, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x6d, 0x65, 0x73,
    0x73, 0x61, 0x67, 0x65, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
    0x20, 0x69, 0x66, 0x0a, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x2e,
    0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x01, 0x04, 0x00, 0x01, 0x12, 0x04, 0x80, 0x01, 0x07, 0x0b,
    0x0a, 0x28, 0x0a, 0x06, 0x04, 0x01, 0x04, 0x00, 0x02, 0x00, 0x12, 0x04, 0x81, 0x01, 0x04, 0x12,
    0x22, 0x18, 0x20, 0x53, 0x65, 0x65, 0x20, 0x27, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
    0x65, 0x27, 0x20, 0x62, 0x65, 0x6c, 0x6f, 0x77, 0x2e, 0x0a, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x01,
    0x04, 0x00, 0x02, 0x00, 0x01, 0x12, 0x04, 0x81, 0x01, 0x04, 0x0d, 0x0a, 0x0f, 0x0a, 0x07, 0x04,
    0x01, 0x04, 0x00, 0x02, 0x00, 0x02, 0x12, 0x04, 0x81, 0x01, 0x10, 0x11, 0x0a, 0x25, 0x0a, 0x06,
    0x04, 0x01, 0x04, 0x00, 0x02, 0x01, 0x12, 0x04, 0x82, 0x01, 0x04, 0x0f, 0x22, 0x15, 0x20, 0x53,
    0x65, 0x65, 0x20, 0x27, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x27, 0x20, 0x62, 0x65, 0x6c, 0x6f,
    0x77, 0x2e, 0x0a, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x01, 0x04, 0x00, 0x02, 0x01, 0x01, 0x12, 0x04,
    0x82, 0x01, 0x04, 0x0a, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x01, 0x04, 0x00, 0x02, 0x01, 0x02, 0x12,
    0x04, 0x82, 0x01, 0x0d, 0x0e, 0x0a, 0x26, 0x0a, 0x06, 0x04, 0x01, 0x04, 0x00, 0x02, 0x02, 0x12,
    0x04, 0x83, 0x01, 0x04, 0x10, 0x22, 0x16, 0x20, 0x53, 0x65, 0x65, 0x20, 0x27, 0x4d, 0x65, 0x73,
    0x73, 0x61, 0x67, 0x65, 0x27, 0x20, 0x62, 0x65, 0x6c, 0x6f, 0x77, 0x2e, 0x0a, 0x0a, 0x0f, 0x0a,
    0x07, 0x04, 0x01, 0x04, 0x00, 0x02, 0x02, 0x01, 0x12, 0x04, 0x83, 0x01, 0x04, 0x0b, 0x0a, 0x0f,
    0x0a, 0x07, 0x04, 0x01, 0x04, 0x00, 0x02, 0x02, 0x02, 0x12, 0x04, 0x83, 0x01, 0x0e, 0x0f, 0x0a,
    0xc5, 0x01, 0x0a, 0x04, 0x04, 0x01, 0x03, 0x00, 0x12, 0x06, 0x89, 0x01, 0x02, 0x8c, 0x01, 0x03,
    0x1a, 0xb4, 0x01, 0x20, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x73,
    0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68,
    0x65, 0x20, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x20, 0x49, 0x66, 0x20, 0x73, 0x75, 0x62, 0x73,
    0x63, 0x72, 0x69, 0x62, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x61, 0x20,
    0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x0a, 0x20,
    0x69, 0x74, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20,
    0x61, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x74, 0x68,
    0x65, 0x20, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x75, 0x70, 0x64, 0x61,
    0x74, 0x65, 0x73, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x27,
    0x74, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x0a, 0x20, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
    0x64, 0x67, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x63, 0x68, 0x65,
    0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x01, 0x03, 0x00, 0x01,
    0x12, 0x04, 0x89, 0x01, 0x0a, 0x13, 0x0a, 0x0e, 0x0a, 0x06, 0x04, 0x01, 0x03, 0x00, 0x02, 0x00,
    0x12, 0x04, 0x8a, 0x01, 0x04, 0x2f, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x01, 0x03, 0x00, 0x02, 0x00,
    0x04, 0x12, 0x04, 0x8a, 0x01, 0x04, 0x0c, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x01, 0x03, 0x00, 0x02,
    0x00, 0x06, 0x12, 0x04, 0x8a, 0x01, 0x0d, 0x15, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x01, 0x03, 0x00,
    0x02, 0x00, 0x01, 0x12, 0x04, 0x8a, 0x01, 0x16, 0x2a, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x01, 0x03,
    0x00, 0x02, 0x00, 0x03, 0x12, 0x04, 0x8a, 0x01, 0x2d, 0x2e, 0x0a, 0x0e, 0x0a, 0x06, 0x04, 0x01,
    0x03, 0x00, 0x02, 0x01, 0x12, 0x04, 0x8b, 0x01, 0x04, 0x2f, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x01,
    0x03, 0x00, 0x02, 0x01, 0x04, 0x12, 0x04, 0x8b, 0x01, 0x04, 0x0c, 0x0a, 0x0f, 0x0a, 0x07, 0x04,
    0x01, 0x03, 0x00, 0x02, 0x01, 0x06, 0x12, 0x04, 0x8b, 0x01, 0x0d, 0x13, 0x0a, 0x0f, 0x0a, 0x07,
    0x04, 0x01, 0x03, 0x00, 0x02, 0x01, 0x01, 0x12, 0x04, 0x8b, 0x01, 0x14, 0x2a, 0x0a, 0x0f, 0x0a,
    0x07, 0x04, 0x01, 0x03, 0x00, 0x02, 0x01, 0x03, 0x12, 0x04, 0x8b, 0x01, 0x2d, 0x2e, 0x0a, 0xc1,
    0x04, 0x0a, 0x04, 0x04, 0x01, 0x03, 0x01, 0x12, 0x06, 0x97, 0x01, 0x02, 0x99, 0x01, 0x03, 0x1a,
    0xb0, 0x04, 0x20, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20,
    0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x61,
    0x20, 0x74, 0x61, 0x73, 0x6b, 0x20, 0x68, 0x61, 0x73, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69,
    0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x6f, 0x6e, 0x65, 0x0a,
    0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x6e, 0x6f, 0x74, 0x68, 0x65,
    0x72, 0x2e, 0x20, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
    0x73, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x20, 0x75, 0x73, 0x65, 0x64,
    0x20, 0x62, 0x79, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x0a, 0x20, 0x74,
    0x6f, 0x20, 0x72, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x6c, 0x79, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
    0x6e, 0x69, 0x63, 0x61, 0x74, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75,
    0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x20, 0x74,
    0x68, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x79, 0x0a, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
    0x2e, 0x20, 0x49, 0x74, 0x20, 0x69, 0x73, 0x20, 0x63, 0x72, 0x75, 0x63, 0x69, 0x61, 0x6c, 0x20,
    0x74, 0x68, 0x61, 0x74, 0x20, 0x61, 0x20, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x20,
    0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x28, 0x73, 0x65, 0x65, 0x20, 0x54, 0x61, 0x73, 0x6b,
    0x53, 0x74, 0x61, 0x74, 0x65, 0x0a, 0x20, 0x69, 0x6e, 0x20, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x73,
    0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x29, 0x20, 0x69, 0x73, 0x20, 0x73, 0x65, 0x6e,
    0x74, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
    0x65, 0x72, 0x20, 0x61, 0x73, 0x20, 0x73, 0x6f, 0x6f, 0x6e, 0x20, 0x61, 0x73, 0x20, 0x74, 0x68,
    0x65, 0x20, 0x74, 0x61, 0x73, 0x6b, 0x0a, 0x20, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
    0x65, 0x73, 0x2c, 0x20, 0x69, 0x6e, 0x20, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x20, 0x66, 0x6f, 0x72,
    0x20, 0x4d, 0x65, 0x73, 0x6f, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
    0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x20,
    0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x0a, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68,
    0x65, 0x20, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x20, 0x49, 0x74, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68,
    0x65, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
    0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
    0x72, 0x20, 0x74, 0x6f, 0x0a, 0x20, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x6c, 0x79,
    0x20, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x20, 0x74, 0x68, 0x65,
    0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x73, 0x74,
    0x61, 0x74, 0x75, 0x73, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x20, 0x53, 0x65, 0x65,
    0x0a, 0x20, 0x27, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x27,
    0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x27, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x27,
    0x20, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f, 0x76, 0x65, 0x20, 0x66,
    0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x73,
    0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x01, 0x03, 0x01, 0x01, 0x12, 0x04, 0x97, 0x01, 0x0a,
    0x10, 0x0a, 0x0e, 0x0a, 0x06, 0x04, 0x01, 0x03, 0x01, 0x02, 0x00, 0x12, 0x04, 0x98, 0x01, 0x04,
    0x23, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x01, 0x03, 0x01, 0x02, 0x00, 0x04, 0x12, 0x04, 0x98, 0x01,
    0x04, 0x0c, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x01, 0x03, 0x01, 0x02, 0x00, 0x06, 0x12, 0x04, 0x98,
    0x01, 0x0d, 0x17, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x01, 0x03, 0x01, 0x02, 0x00, 0x01, 0x12, 0x04,
    0x98, 0x01, 0x18, 0x1e, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x01, 0x03, 0x01, 0x02, 0x00, 0x03, 0x12,
    0x04, 0x98, 0x01, 0x21, 0x22, 0x0a, 0xe5, 0x01, 0x0a, 0x04, 0x04, 0x01, 0x03, 0x02, 0x12, 0x06,
    0x9f, 0x01, 0x02, 0xa1, 0x01, 0x03, 0x1a, 0xd4, 0x01, 0x20, 0x53, 0x65, 0x6e, 0x64, 0x73, 0x20,
    0x61, 0x72, 0x62, 0x69, 0x74, 0x72, 0x61, 0x72, 0x79, 0x20, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79,
    0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x63, 0x68,
    0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x20, 0x4e, 0x6f, 0x74, 0x65, 0x20, 0x74, 0x68, 0x61,
    0x74, 0x20, 0x4d, 0x65, 0x73, 0x6f, 0x73, 0x0a, 0x20, 0x6e, 0x65, 0x69, 0x74, 0x68, 0x65, 0x72,
    0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x73, 0x20, 0x74, 0x68, 0x69, 0x73,
    0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x6e, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6b, 0x65, 0x73, 0x20,
    0x61, 0x6e, 0x79, 0x20, 0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x73, 0x20, 0x61,
    0x62, 0x6f, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x0a, 0x20, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
    0x72, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61,
    0x67, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
    0x6c, 0x65, 0x72, 0x2e, 0x0a, 0x20, 0x53, 0x65, 0x65, 0x20, 0x27, 0x4d, 0x65, 0x73, 0x73, 0x61,
    0x67, 0x65, 0x27, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x27, 0x45, 0x76, 0x65, 0x6e,
    0x74, 0x73, 0x27, 0x20, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a,
    0x05, 0x04, 0x01, 0x03, 0x02, 0x01, 0x12, 0x04, 0x9f, 0x01, 0x0a, 0x11, 0x0a, 0x0e, 0x0a, 0x06,
    0x04, 0x01, 0x03, 0x02, 0x02, 0x00, 0x12, 0x04, 0xa0, 0x01, 0x04, 0x1c, 0x0a, 0x0f, 0x0a, 0x07,
    0x04, 0x01, 0x03, 0x02, 0x02, 0x00, 0x04, 0x12, 0x04, 0xa0, 0x01, 0x04, 0x0c, 0x0a, 0x0f, 0x0a,
    0x07, 0x04, 0x01, 0x03, 0x02, 0x02, 0x00, 0x05, 0x12, 0x04, 0xa0, 0x01, 0x0d, 0x12, 0x0a, 0x0f,
    0x0a, 0x07, 0x04, 0x01, 0x03, 0x02, 0x02, 0x00, 0x01, 0x12, 0x04, 0xa0, 0x01, 0x13, 0x17, 0x0a,
    0x0f, 0x0a, 0x07, 0x04, 0x01, 0x03, 0x02, 0x02, 0x00, 0x03, 0x12, 0x04, 0xa0, 0x01, 0x1a, 0x1b,
    0x0a, 0x42, 0x0a, 0x04, 0x04, 0x01, 0x02, 0x00, 0x12, 0x04, 0xa4, 0x01, 0x02, 0x26, 0x1a, 0x34,
    0x20, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20,
    0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x67,
    0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x63, 0x61,
    0x6c, 0x6c, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x00, 0x04, 0x12, 0x04, 0xa4,
    0x01, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x00, 0x06, 0x12, 0x04, 0xa4, 0x01,
    0x0b, 0x15, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x00, 0x01, 0x12, 0x04, 0xa4, 0x01, 0x16,
    0x21, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x00, 0x03, 0x12, 0x04, 0xa4, 0x01, 0x24, 0x25,
    0x0a, 0x0c, 0x0a, 0x04, 0x04, 0x01, 0x02, 0x01, 0x12, 0x04, 0xa5, 0x01, 0x02, 0x28, 0x0a, 0x0d,
    0x0a, 0x05, 0x04, 0x01, 0x02, 0x01, 0x04, 0x12, 0x04, 0xa5, 0x01, 0x02, 0x0a, 0x0a, 0x0d, 0x0a,
    0x05, 0x04, 0x01, 0x02, 0x01, 0x06, 0x12, 0x04, 0xa5, 0x01, 0x0b, 0x16, 0x0a, 0x0d, 0x0a, 0x05,
    0x04, 0x01, 0x02, 0x01, 0x01, 0x12, 0x04, 0xa5, 0x01, 0x17, 0x23, 0x0a, 0x0d, 0x0a, 0x05, 0x04,
    0x01, 0x02, 0x01, 0x03, 0x12, 0x04, 0xa5, 0x01, 0x26, 0x27, 0x0a, 0xc1, 0x01, 0x0a, 0x04, 0x04,
    0x01, 0x02, 0x02, 0x12, 0x04, 0xaa, 0x01, 0x02, 0x19, 0x1a, 0xb2, 0x01, 0x20, 0x54, 0x79, 0x70,
    0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x2c, 0x20, 0x69,
    0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x6f,
    0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x62, 0x65,
    0x6c, 0x6f, 0x77, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x0a, 0x20, 0x70,
    0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x20, 0x69, 0x66, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x74,
    0x79, 0x70, 0x65, 0x20, 0x68, 0x61, 0x73, 0x20, 0x61, 0x20, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64,
    0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
    0x69, 0x6f, 0x6e, 0x2e, 0x0a, 0x20, 0x49, 0x6e, 0x20, 0x63, 0x61, 0x73, 0x65, 0x20, 0x74, 0x79,
    0x70, 0x65, 0x20, 0x69, 0x73, 0x20, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x44,
    0x2c, 0x20, 0x6e, 0x6f, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x20, 0x6e, 0x65, 0x65,
    0x64, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x73, 0x65, 0x74, 0x2e, 0x0a, 0x0a, 0x0d,
    0x0a, 0x05, 0x04, 0x01, 0x02, 0x02, 0x04, 0x12, 0x04, 0xaa, 0x01, 0x02, 0x0a, 0x0a, 0x0d, 0x0a,
    0x05, 0x04, 0x01, 0x02, 0x02, 0x06, 0x12, 0x04, 0xaa, 0x01, 0x0b, 0x0f, 0x0a, 0x0d, 0x0a, 0x05,
    0x04, 0x01, 0x02, 0x02, 0x01, 0x12, 0x04, 0xaa, 0x01, 0x10, 0x14, 0x0a, 0x0d, 0x0a, 0x05, 0x04,
    0x01, 0x02, 0x02, 0x03, 0x12, 0x04, 0xaa, 0x01, 0x17, 0x18, 0x0a, 0x0c, 0x0a, 0x04, 0x04, 0x01,
    0x02, 0x03, 0x12, 0x04, 0xac, 0x01, 0x02, 0x23, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x03,
    0x04, 0x12, 0x04, 0xac, 0x01, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x03, 0x06,
    0x12, 0x04, 0xac, 0x01, 0x0b, 0x14, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x03, 0x01, 0x12,
    0x04, 0xac, 0x01, 0x15, 0x1e, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x03, 0x03, 0x12, 0x04,
    0xac, 0x01, 0x21, 0x22, 0x0a, 0x0c, 0x0a, 0x04, 0x04, 0x01, 0x02, 0x04, 0x12, 0x04, 0xad, 0x01,
    0x02, 0x1d, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x04, 0x04, 0x12, 0x04, 0xad, 0x01, 0x02,
    0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x04, 0x06, 0x12, 0x04, 0xad, 0x01, 0x0b, 0x11,
    0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x04, 0x01, 0x12, 0x04, 0xad, 0x01, 0x12, 0x18, 0x0a,
    0x0d, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x04, 0x03, 0x12, 0x04, 0xad, 0x01, 0x1b, 0x1c, 0x0a, 0x0c,
    0x0a, 0x04, 0x04, 0x01, 0x02, 0x05, 0x12, 0x04, 0xae, 0x01, 0x02, 0x1f, 0x0a, 0x0d, 0x0a, 0x05,
    0x04, 0x01, 0x02, 0x05, 0x04, 0x12, 0x04, 0xae, 0x01, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04,
    0x01, 0x02, 0x05, 0x06, 0x12, 0x04, 0xae, 0x01, 0x0b, 0x12, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x01,
    0x02, 0x05, 0x01, 0x12, 0x04, 0xae, 0x01, 0x13, 0x1a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x01, 0x02,
    0x05, 0x03, 0x12, 0x04, 0xae, 0x01, 0x1d, 0x1e,
];

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
